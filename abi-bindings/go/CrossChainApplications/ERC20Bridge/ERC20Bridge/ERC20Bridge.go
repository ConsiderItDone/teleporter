// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20bridge

import (
	"errors"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/accounts/abi/bind"
	"github.com/ava-labs/subnet-evm/core/types"
	"github.com/ava-labs/subnet-evm/interfaces"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = interfaces.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC20BridgeMetaData contains all meta data concerning the ERC20Bridge contract.
var ERC20BridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"teleporterMessageID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nativeBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeBridgeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"}],\"name\":\"CreateBridgeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMinTeleporterVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinTeleporterVersion\",\"type\":\"uint256\"}],\"name\":\"MinTeleporterVersionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintBridgeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teleporterMessageID\",\"type\":\"uint256\"}],\"name\":\"SubmitCreateBridgeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"TeleporterAddressPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"TeleporterAddressUnpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATE_BRIDGE_TOKENS_REQUIRED_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_BRIDGE_TOKENS_REQUIRED_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WARP_PRECOMPILE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFeeAmount\",\"type\":\"uint256\"}],\"name\":\"bridgeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeTokenContract\",\"type\":\"address\"}],\"name\":\"bridgedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlockchainID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nativeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nativeSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"nativeDecimals\",\"type\":\"uint8\"}],\"name\":\"encodeCreateBridgeTokenData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cosmosRecipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bridgeAmount\",\"type\":\"uint256\"}],\"name\":\"encodeMintBridgeTokensData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cosmosRecipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"encodeTransferBridgeTokensData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTeleporterVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cosmosRecipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFeeAmount\",\"type\":\"uint256\"}],\"name\":\"ibcBridgeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"isTeleporterAddressPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nativeBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"nativeBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeTokenAddress\",\"type\":\"address\"}],\"name\":\"nativeToWrappedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"pauseTeleporterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"originBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"originSenderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"receiveTeleporterMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contractERC20\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"messageFeeAmount\",\"type\":\"uint256\"}],\"name\":\"submitCreateBridgeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeTokenContract\",\"type\":\"address\"}],\"name\":\"submittedBridgeTokenCreations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tokenCreationSubmitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleporterRegistry\",\"outputs\":[{\"internalType\":\"contractTeleporterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"unpauseTeleporterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"updateMinTeleporterVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"}],\"name\":\"wrappedTokenContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bridgeTokenExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b506040516200474938038062004749833981016040819052620000349162000212565b600160005580806001600160a01b038116620000bc5760405162461bcd60e51b815260206004820152603760248201527f54656c65706f727465725570677261646561626c653a207a65726f2074656c6560448201527f706f727465722072656769737472792061646472657373000000000000000000606482015260840160405180910390fd5b6001600160a01b03811660808190526040805163301fd1f560e21b8152905163c07f47d4916004808201926020929091908290030181865afa15801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d919062000244565b600255506200013c33620001c0565b507302000000000000000000000000000000000000056001600160a01b0316634213cf786040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000190573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b6919062000244565b60a052506200025e565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200022557600080fd5b81516001600160a01b03811681146200023d57600080fd5b9392505050565b6000602082840312156200025757600080fd5b5051919050565b60805160a05161449b620002ae60003960008181610238015281816106dd0152818161182601526123b801526000818161019d01528181610dbd015281816110260152611a75015261449b6000f3fe60806040523480156200001157600080fd5b5060043610620001925760003560e01c80637497185611620000f05780639bd9abc011620000a3578063c868efaa116200007a578063c868efaa146200041e578063d2cc7a701462000435578063e3642f1a146200043e578063f2fde38b146200045557600080fd5b80639bd9abc014620003ad578063b9e55da114620003d3578063c63d2207146200040757600080fd5b806374971856146200030b5780637a465fd9146200031a5780638343f66114620003255780638ae279a4146200036d5780638da5cb5b146200038457806397314297146200039657600080fd5b80635f217bcc11620001495780635f217bcc146200028057806365435568146200028b57806366a0680d14620002c85780636b47cd9a14620002df5780636c7e40d114620002ea578063715018a6146200030157600080fd5b80631a7f5bec14620001975780632b0d8f1814620001dc578063367e958414620001f55780634511243e146200021b5780634950d2d014620002325780635eb995141462000269575b600080fd5b620001bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b620001f3620001ed3660046200264a565b6200046c565b005b6200020c6200020636600462002749565b62000567565b604051620001d3919062002830565b620001f36200022c3660046200264a565b620005c6565b6200025a7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001620001d3565b620001f36200027a36600462002845565b620006b9565b6200025a621e848081565b620001bf6200029c3660046200285f565b60076020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b620001f3620002d9366004620028a6565b620006d1565b6200025a620493e081565b620001f3620002fb36600462002949565b6200098e565b620001f362000cde565b620001bf6005600160991b0181565b6200025a62030d4081565b6200035c620003363660046200285f565b600460209081526000938452604080852082529284528284209052825290205460ff1681565b6040519015158152602001620001d3565b6200020c6200037e366004620029ab565b62000cf6565b6003546001600160a01b0316620001bf565b6200035c620003a73660046200264a565b62000d5d565b6200035c620003be3660046200264a565b60066020526000908152604090205460ff1681565b6200025a620003e43660046200285f565b600560209081526000938452604080852082529284528284209052825290205481565b620001f36200041836600462002a46565b62000d7b565b620001f36200042f36600462002abb565b62000da5565b6002546200025a565b6200020c6200044f36600462002b4a565b62000f58565b620001f3620004663660046200264a565b62000f9c565b6200047662001018565b6001600160a01b038116620004a85760405162461bcd60e51b81526004016200049f9062002bbb565b60405180910390fd5b620004b38162000d5d565b15620005185760405162461bcd60e51b815260206004820152602d60248201527f54656c65706f727465725570677261646561626c653a2061646472657373206160448201526c1b1c9958591e481c185d5cd959609a1b60648201526084016200049f565b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517f933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c9190a250565b606060008585858560405160200162000584949392919062002c09565b6040516020818303038152906040529050600081604051602001620005ab92919062002c6e565b6040516020818303038152906040529150505b949350505050565b620005d062001018565b6001600160a01b038116620005f95760405162461bcd60e51b81526004016200049f9062002bbb565b620006048162000d5d565b620006645760405162461bcd60e51b815260206004820152602960248201527f54656c65706f727465725570677261646561626c653a2061646472657373206e6044820152681bdd081c185d5cd95960ba1b60648201526084016200049f565b6040516001600160a01b038216907f844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c390600090a26001600160a01b03166000908152600160205260409020805460ff19169055565b620006c362001018565b620006ce8162001022565b50565b620006db620011c9565b7f000000000000000000000000000000000000000000000000000000000000000088036200071d5760405162461bcd60e51b81526004016200049f9062002ca8565b6001600160a01b038516620007465760405162461bcd60e51b81526004016200049f9062002cf0565b6001600160a01b0387166200076f5760405162461bcd60e51b81526004016200049f9062002d33565b6001600160a01b03861660009081526006602052604090205460ff161562000861576200079d818362002d95565b8311620007fc5760405162461bcd60e51b815260206004820152602660248201527f45524332304272696467653a20696e73756666696369656e7420746f74616c20604482015265185b5bdd5b9d60d21b60648201526084016200049f565b6200085b6040518061010001604052808a8152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018681526020018581526020018481526020018381525062001224565b62000979565b60008881526004602090815260408083206001600160a01b03808c168552908352818420908a16845290915290205460ff16620008f35760405162461bcd60e51b815260206004820152602960248201527f45524332304272696467653a20696e76616c69642062726964676520746f6b656044820152686e206164647265737360b81b60648201526084016200049f565b600062000901878562001632565b9050828111620009665760405162461bcd60e51b815260206004820152602960248201527f45524332304272696467653a20696e73756666696369656e742061646a757374604482015268195908185b5bdd5b9d60ba1b60648201526084016200049f565b6200097789898989898689620017a8565b505b620009846001600055565b5050505050505050565b62000998620011c9565b6001600160a01b038416620009c15760405162461bcd60e51b81526004016200049f9062002d33565b6000620009cd62001a70565b905060008215620009fc57620009e4848462001632565b9050620009fc6001600160a01b038516838362001b72565b600062000b3a86876001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000a42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000a6c919081019062002e04565b886001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000aab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000ad5919081019062002e04565b896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b14573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000206919062002e3c565b90506000836001600160a01b031663624488506040518060c001604052808c81526020018b6001600160a01b0316815260200160405180604001604052808b6001600160a01b03168152602001888152508152602001621e8480815260200160006001600160401b0381111562000bb55762000bb56200266a565b60405190808252806020026020018201604052801562000bdf578160200160208202803683370190505b508152602001858152506040518263ffffffff1660e01b815260040162000c07919062002ea2565b6020604051808303816000875af115801562000c27573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c4d919062002f24565b60008a81526004602090815260408083206001600160a01b03808e16808652918452828520908d16808652935292819020805460ff1916600117905551929350918b907f110b902745a3d7d6b66732479f01de654a3bc6e501be7c8ba2c3a6f9868cb5399062000cc09086815260200190565b60405180910390a45050505062000cd76001600055565b5050505050565b62000ce862001c5e565b62000cf4600062001cba565b565b606060008888888888888860405160200162000d19979695949392919062002f3e565b604051602081830303815290604052905060028160405160200162000d4092919062002c6e565b604051602081830303815290604052915050979650505050505050565b6001600160a01b031660009081526001602052604090205460ff1690565b62000d9c8787878760405180602001604052806000815250888888620006d1565b50505050505050565b60025460405163260f846760e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634c1f08ce90602401602060405180830381865afa15801562000e0d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e33919062002f24565b101562000e9c5760405162461bcd60e51b815260206004820152603060248201527f54656c65706f727465725570677261646561626c653a20696e76616c6964205460448201526f32b632b837b93a32b91039b2b73232b960811b60648201526084016200049f565b62000ea73362000d5d565b1562000f0f5760405162461bcd60e51b815260206004820152603060248201527f54656c65706f727465725570677261646561626c653a2054656c65706f72746560448201526f1c881859191c995cdcc81c185d5cd95960821b60648201526084016200049f565b62000f52848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001d0c92505050565b50505050565b606060008585858560405160200162000f75949392919062002f90565b6040516020818303038152906040529050600181604051602001620005ab92919062002c6e565b62000fa662001c5e565b6001600160a01b0381166200100d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200049f565b620006ce8162001cba565b62000cf462001c5e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001083573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010a9919062002f24565b600254909150818311156200111b5760405162461bcd60e51b815260206004820152603160248201527f54656c65706f727465725570677261646561626c653a20696e76616c6964205460448201527032b632b837b93a32b9103b32b939b4b7b760791b60648201526084016200049f565b808311620011925760405162461bcd60e51b815260206004820152603f60248201527f54656c65706f727465725570677261646561626c653a206e6f7420677265617460448201527f6572207468616e2063757272656e74206d696e696d756d2076657273696f6e0060648201526084016200049f565b6002839055604051839082907fa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d90600090a3505050565b6002600054036200121d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016200049f565b6002600055565b60006200123062001a70565b90506000808360c00151111562001273576200125583604001518460c0015162001632565b604084015190915062001273906001600160a01b0316838362001b72565b60008360c001518460a001516200128b919062002fcf565b604085810151905163079cc67960e41b815233600482015260248101839052919250906001600160a01b038216906379cc679090604401600060405180830381600087803b158015620012dd57600080fd5b505af1158015620012f2573d6000803e3d6000fd5b505050506000816001600160a01b031663f72539686040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001337573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200135d919062002f24565b90506000826001600160a01b0316631a0b79bf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620013a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013c6919062002fe5565b9050818760000151036200140c57806001600160a01b031687602001516001600160a01b0316146200140c5760405162461bcd60e51b81526004016200049f9062003005565b60006200149788600001518960200151866001600160a01b03166374d32ad46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200145b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001481919062002fe5565b8b606001518c608001518a8e60e0015162000cf6565b90506000876001600160a01b031663624488506040518060c00160405280878152602001866001600160a01b0316815260200160405180604001604052808e604001516001600160a01b031681526020018c8152508152602001620493e0815260200160006001600160401b038111156200151657620015166200266a565b60405190808252806020026020018201604052801562001540578160200160208202803683370190505b508152602001858152506040518263ffffffff1660e01b815260040162001568919062002ea2565b6020604051808303816000875af115801562001588573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015ae919062002f24565b90508089600001518a604001516001600160a01b03167f97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c318c602001518d606001518b6040516200161f939291906001600160a01b039384168152919092166020820152604081019190915260600190565b60405180910390a4505050505050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa1580156200167c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016a2919062002f24565b9050620016bb6001600160a01b03851633308662001e8b565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa15801562001703573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001729919062002f24565b9050818111620017915760405162461bcd60e51b815260206004820152602c60248201527f5361666545524332305472616e7366657246726f6d3a2062616c616e6365206e60448201526b1bdd081a5b98dc99585cd95960a21b60648201526084016200049f565b6200179d828262002fcf565b925050505b92915050565b6001600160a01b03851660009081526006602052604090205460ff1615620018245760405162461bcd60e51b815260206004820152602860248201527f45524332304272696467653a2063616e6e6f742062726964676520777261707060448201526732b2103a37b5b2b760c11b60648201526084016200049f565b7f00000000000000000000000000000000000000000000000000000000000000008703620018665760405162461bcd60e51b81526004016200049f9062002ca8565b60006200187262001a70565b905081156200189157620018916001600160a01b038716828462001b72565b60006200189f838562002fcf565b60008a81526005602090815260408083206001600160a01b03808e168552908352818420908c168452909152812080549293508392909190620018e490849062002d95565b9091555060009050620018fa8888888562000f58565b90506000836001600160a01b031663624488506040518060c001604052808e81526020018d6001600160a01b0316815260200160405180604001604052808e6001600160a01b031681526020018a815250815260200162030d40815260200160006001600160401b038111156200197557620019756200266a565b6040519080825280602002602001820160405280156200199f578160200160208202803683370190505b508152602001858152506040518263ffffffff1660e01b8152600401620019c7919062002ea2565b6020604051808303816000875af1158015620019e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a0d919062002f24565b604080516001600160a01b038d811682528b8116602083015291810186905291925082918d918c16907f97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c319060600160405180910390a45050505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d820e64f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001ad2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001af8919062002fe5565b905062001b058162000d5d565b1562001b6d5760405162461bcd60e51b815260206004820152603060248201527f54656c65706f727465725570677261646561626c653a2054656c65706f72746560448201526f1c881cd95b991a5b99c81c185d5cd95960821b60648201526084016200049f565b919050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801562001bc4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bea919062002f24565b62001bf6919062002d95565b6040516001600160a01b03851660248201526044810182905290915062000f5290859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915262001ec5565b6003546001600160a01b0316331462000cf45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200049f565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000808280602001905181019062001d25919062003054565b9092509050600082600281111562001d415762001d4162002c58565b0362001d85576000806000808480602001905181019062001d639190620030c2565b935093509350935062001d7b89898686868662001fa3565b5050505062000cd7565b600182600281111562001d9c5762001d9c62002c58565b0362001dd6576000806000808480602001905181019062001dbe91906200314b565b935093509350935062001d7b89898686868662002112565b600282600281111562001ded5762001ded62002c58565b0362001e425760008060008060008060008780602001905181019062001e149190620031be565b965096509650965096509650965062001e358c8c8989898989898962002294565b5050505050505062000cd7565b60405162461bcd60e51b815260206004820152601b60248201527f45524332304272696467653a20696e76616c696420616374696f6e000000000060448201526064016200049f565b6040516001600160a01b038085166024830152831660448201526064810182905262000f529085906323b872dd60e01b9060840162001c26565b600062001f1c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200244f9092919063ffffffff16565b80519091501562001f9e578080602001905181019062001f3d91906200325c565b62001f9e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016200049f565b505050565b60008681526007602090815260408083206001600160a01b0389811685529083528184208882168552909252909120541615620020345760405162461bcd60e51b815260206004820152602860248201527f45524332304272696467653a2062726964676520746f6b656e20616c72656164604482015267792065786973747360c01b60648201526084016200049f565b60008686868686866040516200204a9062002626565b6200205b9695949392919062003280565b604051809103906000f08015801562002078573d6000803e3d6000fd5b506001600160a01b038181166000818152600660209081526040808320805460ff191660011790558c8352600782528083208c8616808552908352818420958c168085529583529281902080546001600160a01b031916851790555192835293945091928a917fe1c61a845f79534e11924517ddbedc668d0c20e467eafb4d3bd2858e2815f3b5910160405180910390a450505050505050565b6200211c620011c9565b6001600160a01b038316620021455760405162461bcd60e51b81526004016200049f9062002cf0565b60008681526007602090815260408083206001600160a01b03808a1685529083528184208882168552909252909120541680620021d65760405162461bcd60e51b815260206004820152602860248201527f45524332304272696467653a2062726964676520746f6b656e20646f6573206e6044820152671bdd08195e1a5cdd60c21b60648201526084016200049f565b6040516340c10f1960e01b81526001600160a01b038581166004830152602482018490528216906340c10f1990604401600060405180830381600087803b1580156200222157600080fd5b505af115801562002236573d6000803e3d6000fd5b5050604080516001600160a01b03888116825260208201879052851693507fc0767f158f0d5394b598489a51ed607cd55a8be2dcef113ba1626efcf4c6395492500160405180910390a2506200228c6001600055565b505050505050565b6200229e620011c9565b6001600160a01b038416620022c75760405162461bcd60e51b81526004016200049f9062002cf0565b6001600160a01b038616620022f05760405162461bcd60e51b81526004016200049f9062002d33565b60008981526005602090815260408083206001600160a01b03808d1685529083528184209089168452909152902054828110156200237b5760405162461bcd60e51b815260206004820152602160248201527f45524332304272696467653a20696e73756666696369656e742062616c616e636044820152606560f81b60648201526084016200049f565b62002387838262002fcf565b60008b81526005602090815260408083206001600160a01b03808f168552908352818420908b1684529091529020557f0000000000000000000000000000000000000000000000000000000000000000880362002426576001600160a01b0387163014620024095760405162461bcd60e51b81526004016200049f9062003005565b6200241f6001600160a01b03871686856200246a565b5062002439565b6200243788888888888888620017a8565b505b620024446001600055565b505050505050505050565b60606200246084846000856200249c565b90505b9392505050565b6040516001600160a01b03831660248201526044810182905262001f9e90849063a9059cbb60e01b9060640162001c26565b606082471015620024ff5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016200049f565b600080866001600160a01b031685876040516200251d9190620032df565b60006040518083038185875af1925050503d80600081146200255c576040519150601f19603f3d011682016040523d82523d6000602084013e62002561565b606091505b509150915062002574878383876200257f565b979650505050505050565b60608315620025f3578251600003620025eb576001600160a01b0385163b620025eb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016200049f565b5081620005be565b620005be83838151156200260a5781518083602001fd5b8060405162461bcd60e51b81526004016200049f919062002830565b61116880620032fe83390190565b6001600160a01b0381168114620006ce57600080fd5b6000602082840312156200265d57600080fd5b8135620024638162002634565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620026ab57620026ab6200266a565b604052919050565b60006001600160401b03821115620026cf57620026cf6200266a565b50601f01601f191660200190565b600082601f830112620026ef57600080fd5b8135620027066200270082620026b3565b62002680565b8181528460208386010111156200271c57600080fd5b816020850160208301376000918101602001919091529392505050565b60ff81168114620006ce57600080fd5b600080600080608085870312156200276057600080fd5b84356200276d8162002634565b935060208501356001600160401b03808211156200278a57600080fd5b6200279888838901620026dd565b94506040870135915080821115620027af57600080fd5b50620027be87828801620026dd565b9250506060850135620027d18162002739565b939692955090935050565b60005b83811015620027f9578181015183820152602001620027df565b50506000910152565b600081518084526200281c816020860160208601620027dc565b601f01601f19169290920160200192915050565b60208152600062002463602083018462002802565b6000602082840312156200285857600080fd5b5035919050565b6000806000606084860312156200287557600080fd5b833592506020840135620028898162002634565b915060408401356200289b8162002634565b809150509250925092565b600080600080600080600080610100898b031215620028c457600080fd5b883597506020890135620028d88162002634565b96506040890135620028ea8162002634565b95506060890135620028fc8162002634565b945060808901356001600160401b038111156200291857600080fd5b620029268b828c01620026dd565b989b979a50959894979660a0860135965060c08601359560e00135945092505050565b600080600080600060a086880312156200296257600080fd5b853594506020860135620029768162002634565b93506040860135620029888162002634565b925060608601356200299a8162002634565b949793965091946080013592915050565b600080600080600080600060e0888a031215620029c757600080fd5b873596506020880135620029db8162002634565b95506040880135620029ed8162002634565b94506060880135620029ff8162002634565b935060808801356001600160401b0381111562002a1b57600080fd5b62002a298a828b01620026dd565b93505060a0880135915060c0880135905092959891949750929550565b600080600080600080600060e0888a03121562002a6257600080fd5b87359650602088013562002a768162002634565b9550604088013562002a888162002634565b9450606088013562002a9a8162002634565b9699959850939660808101359560a0820135955060c0909101359350915050565b6000806000806060858703121562002ad257600080fd5b84359350602085013562002ae68162002634565b925060408501356001600160401b038082111562002b0357600080fd5b818701915087601f83011262002b1857600080fd5b81358181111562002b2857600080fd5b88602082850101111562002b3b57600080fd5b95989497505060200194505050565b6000806000806080858703121562002b6157600080fd5b843562002b6e8162002634565b9350602085013562002b808162002634565b925060408501356001600160401b0381111562002b9c57600080fd5b62002baa87828801620026dd565b949793965093946060013593505050565b6020808252602e908201527f54656c65706f727465725570677261646561626c653a207a65726f2054656c6560408201526d706f72746572206164647265737360901b606082015260800190565b6001600160a01b038516815260806020820181905260009062002c2f9083018662002802565b828103604084015262002c43818662002802565b91505060ff8316606083015295945050505050565b634e487b7160e01b600052602160045260246000fd5b60006003841062002c8f57634e487b7160e01b600052602160045260246000fd5b8382526040602083015262002460604083018462002802565b60208082526028908201527f45524332304272696467653a2063616e6e6f742062726964676520746f20736160408201526736b29031b430b4b760c11b606082015260800190565b60208082526023908201527f45524332304272696467653a207a65726f20726563697069656e74206164647260408201526265737360e81b606082015260800190565b6020808252602c908201527f45524332304272696467653a207a65726f2064657374696e6174696f6e20627260408201526b69646765206164647265737360a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b80820180821115620017a257620017a262002d7f565b600062002dbc6200270084620026b3565b905082815283838301111562002dd157600080fd5b62002463836020830184620027dc565b600082601f83011262002df357600080fd5b620024638383516020850162002dab565b60006020828403121562002e1757600080fd5b81516001600160401b0381111562002e2e57600080fd5b620005be8482850162002de1565b60006020828403121562002e4f57600080fd5b8151620024638162002739565b600081518084526020808501945080840160005b8381101562002e975781516001600160a01b03168752958201959082019060010162002e70565b509495945050505050565b60208152815160208201526000602083015160018060a01b03808216604085015260408501519150808251166060850152506020810151608084015250606083015160a0830152608083015160e060c084015262002f0561010084018262002e5c565b905060a0840151601f198483030160e08501526200179d828262002802565b60006020828403121562002f3757600080fd5b5051919050565b8781526001600160a01b03878116602083015286811660408301528516606082015260e06080820181905260009062002f7a9083018662002802565b60a08301949094525060c0015295945050505050565b6001600160a01b0385811682528416602082015260806040820181905260009062002fbe9083018562002802565b905082606083015295945050505050565b81810381811115620017a257620017a262002d7f565b60006020828403121562002ff857600080fd5b8151620024638162002634565b6020808252602f908201527f45524332304272696467653a20696e76616c69642064657374696e6174696f6e60408201526e20627269646765206164647265737360881b606082015260800190565b600080604083850312156200306857600080fd5b8251600381106200307857600080fd5b60208401519092506001600160401b038111156200309557600080fd5b8301601f81018513620030a757600080fd5b620030b88582516020840162002dab565b9150509250929050565b60008060008060808587031215620030d957600080fd5b8451620030e68162002634565b60208601519094506001600160401b03808211156200310457600080fd5b620031128883890162002de1565b945060408701519150808211156200312957600080fd5b50620031388782880162002de1565b9250506060850151620027d18162002739565b600080600080608085870312156200316257600080fd5b84516200316f8162002634565b6020860151909450620031828162002634565b60408601519093506001600160401b038111156200319f57600080fd5b620031ad8782880162002de1565b606096909601519497939650505050565b600080600080600080600060e0888a031215620031da57600080fd5b875196506020880151620031ee8162002634565b6040890151909650620032018162002634565b6060890151909550620032148162002634565b60808901519094506001600160401b038111156200323157600080fd5b6200323f8a828b0162002de1565b93505060a0880151915060c0880151905092959891949750929550565b6000602082840312156200326f57600080fd5b815180151581146200246357600080fd5b8681526001600160a01b0386811660208301528516604082015260c060608201819052600090620032b49083018662002802565b8281036080840152620032c8818662002802565b91505060ff831660a0830152979650505050505050565b60008251620032f3818460208701620027dc565b919091019291505056fe6101206040523480156200001257600080fd5b506040516200116838038062001168833981016040819052620000359162000292565b82826003620000458382620003d5565b506004620000548282620003d5565b50879150620000b690505760405162461bcd60e51b815260206004820152602160248201527f427269646765546f6b656e3a207a65726f20736f7572636520636861696e20696044820152601960fa1b60648201526084015b60405180910390fd5b6001600160a01b0385166200011e5760405162461bcd60e51b815260206004820152602760248201527f427269646765546f6b656e3a207a65726f20736f7572636520627269646765206044820152666164647265737360c81b6064820152608401620000ad565b6001600160a01b038416620001855760405162461bcd60e51b815260206004820152602660248201527f427269646765546f6b656e3a207a65726f20736f75726365206173736574206160448201526564647265737360d01b6064820152608401620000ad565b3360805260a09590955250506001600160a01b0391821660c0521660e05260ff1661010052620004a1565b80516001600160a01b0381168114620001c857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f557600080fd5b81516001600160401b0380821115620002125762000212620001cd565b604051601f8301601f19908116603f011681019082821181831017156200023d576200023d620001cd565b816040528381526020925086838588010111156200025a57600080fd5b600091505b838210156200027e57858201830151818301840152908201906200025f565b600093810190920192909252949350505050565b60008060008060008060c08789031215620002ac57600080fd5b86519550620002be60208801620001b0565b9450620002ce60408801620001b0565b60608801519094506001600160401b0380821115620002ec57600080fd5b620002fa8a838b01620001e3565b945060808901519150808211156200031157600080fd5b506200032089828a01620001e3565b92505060a087015160ff811681146200033857600080fd5b809150509295509295509295565b600181811c908216806200035b57607f821691505b6020821081036200037c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003d057600081815260208120601f850160051c81016020861015620003ab5750805b601f850160051c820191505b81811015620003cc57828155600101620003b7565b5050505b505050565b81516001600160401b03811115620003f157620003f1620001cd565b620004098162000402845462000346565b8462000382565b602080601f831160018114620004415760008415620004285750858301515b600019600386901b1c1916600185901b178555620003cc565b600085815260208120601f198616915b82811015620004725788860151825594840194600190910190840162000451565b5085821015620004915787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610c7b620004ed60003960006101c70152600061025a01526000610173015260006102fc0152600081816102c2015261041b0152610c7b6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d714610297578063a9059cbb146102aa578063cd596583146102bd578063dd62ed3e146102e4578063f7253968146102f757600080fd5b806370a082311461022c57806374d32ad41461025557806379cc67901461027c57806395d89b411461028f57600080fd5b806323b872dd116100e957806323b872dd146101ad578063313ce567146101c057806339509351146101f157806340c10f191461020457806342966c681461021957600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c5780631a0b79bf1461016e575b600080fd5b61012361031e565b6040516101309190610aac565b60405180910390f35b61014c610147366004610b16565b6103b0565b6040519015158152602001610130565b6002545b604051908152602001610130565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610130565b61014c6101bb366004610b40565b6103ca565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610130565b61014c6101ff366004610b16565b6103ee565b610217610212366004610b16565b610410565b005b610217610227366004610b7c565b61049b565b61016061023a366004610b95565b6001600160a01b031660009081526020819052604090205490565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b61021761028a366004610b16565b6104a8565b6101236104bd565b61014c6102a5366004610b16565b6104cc565b61014c6102b8366004610b16565b610547565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b6101606102f2366004610bb7565b610555565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b60606003805461032d90610bea565b80601f016020809104026020016040519081016040528092919081815260200182805461035990610bea565b80156103a65780601f1061037b576101008083540402835291602001916103a6565b820191906000526020600020905b81548152906001019060200180831161038957829003601f168201915b5050505050905090565b6000336103be818585610580565b60019150505b92915050565b6000336103d88582856106a5565b6103e385858561071f565b506001949350505050565b6000336103be8185856104018383610555565b61040b9190610c24565b610580565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461048d5760405162461bcd60e51b815260206004820152601960248201527f427269646765546f6b656e3a20756e617574686f72697a65640000000000000060448201526064015b60405180910390fd5b61049782826108c3565b5050565b6104a53382610982565b50565b6104b38233836106a5565b6104978282610982565b60606004805461032d90610bea565b600033816104da8286610555565b90508381101561053a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610484565b6103e38286868403610580565b6000336103be81858561071f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105e25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610484565b6001600160a01b0382166106435760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610484565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006106b18484610555565b90506000198114610719578181101561070c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610484565b6107198484848403610580565b50505050565b6001600160a01b0383166107835760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610484565b6001600160a01b0382166107e55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610484565b6001600160a01b0383166000908152602081905260409020548181101561085d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610484565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610719565b6001600160a01b0382166109195760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610484565b806002600082825461092b9190610c24565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166109e25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610484565b6001600160a01b03821660009081526020819052604090205481811015610a565760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610484565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610698565b600060208083528351808285015260005b81811015610ad957858101830151858201604001528201610abd565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610b1157600080fd5b919050565b60008060408385031215610b2957600080fd5b610b3283610afa565b946020939093013593505050565b600080600060608486031215610b5557600080fd5b610b5e84610afa565b9250610b6c60208501610afa565b9150604084013590509250925092565b600060208284031215610b8e57600080fd5b5035919050565b600060208284031215610ba757600080fd5b610bb082610afa565b9392505050565b60008060408385031215610bca57600080fd5b610bd383610afa565b9150610be160208401610afa565b90509250929050565b600181811c90821680610bfe57607f821691505b602082108103610c1e57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156103c457634e487b7160e01b600052601160045260246000fdfea26469706673582212208a8e82a679ec260481bb5d10cf7933d8213beeeb9291c42d2ad6b12aa8eb16e264736f6c63430008120033a2646970667358221220f341517e43dda26dca3451fa11a5f5e61bb847a2e9587823052be140560cd04b64736f6c63430008120033",
}

// ERC20BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20BridgeMetaData.ABI instead.
var ERC20BridgeABI = ERC20BridgeMetaData.ABI

// ERC20BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20BridgeMetaData.Bin instead.
var ERC20BridgeBin = ERC20BridgeMetaData.Bin

// DeployERC20Bridge deploys a new Ethereum contract, binding an instance of ERC20Bridge to it.
func DeployERC20Bridge(auth *bind.TransactOpts, backend bind.ContractBackend, teleporterRegistryAddress common.Address) (common.Address, *types.Transaction, *ERC20Bridge, error) {
	parsed, err := ERC20BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20BridgeBin), backend, teleporterRegistryAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20Bridge{ERC20BridgeCaller: ERC20BridgeCaller{contract: contract}, ERC20BridgeTransactor: ERC20BridgeTransactor{contract: contract}, ERC20BridgeFilterer: ERC20BridgeFilterer{contract: contract}}, nil
}

// ERC20Bridge is an auto generated Go binding around an Ethereum contract.
type ERC20Bridge struct {
	ERC20BridgeCaller     // Read-only binding to the contract
	ERC20BridgeTransactor // Write-only binding to the contract
	ERC20BridgeFilterer   // Log filterer for contract events
}

// ERC20BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20BridgeSession struct {
	Contract     *ERC20Bridge      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20BridgeCallerSession struct {
	Contract *ERC20BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ERC20BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20BridgeTransactorSession struct {
	Contract     *ERC20BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ERC20BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20BridgeRaw struct {
	Contract *ERC20Bridge // Generic contract binding to access the raw methods on
}

// ERC20BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20BridgeCallerRaw struct {
	Contract *ERC20BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20BridgeTransactorRaw struct {
	Contract *ERC20BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20Bridge creates a new instance of ERC20Bridge, bound to a specific deployed contract.
func NewERC20Bridge(address common.Address, backend bind.ContractBackend) (*ERC20Bridge, error) {
	contract, err := bindERC20Bridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20Bridge{ERC20BridgeCaller: ERC20BridgeCaller{contract: contract}, ERC20BridgeTransactor: ERC20BridgeTransactor{contract: contract}, ERC20BridgeFilterer: ERC20BridgeFilterer{contract: contract}}, nil
}

// NewERC20BridgeCaller creates a new read-only instance of ERC20Bridge, bound to a specific deployed contract.
func NewERC20BridgeCaller(address common.Address, caller bind.ContractCaller) (*ERC20BridgeCaller, error) {
	contract, err := bindERC20Bridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeCaller{contract: contract}, nil
}

// NewERC20BridgeTransactor creates a new write-only instance of ERC20Bridge, bound to a specific deployed contract.
func NewERC20BridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20BridgeTransactor, error) {
	contract, err := bindERC20Bridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeTransactor{contract: contract}, nil
}

// NewERC20BridgeFilterer creates a new log filterer instance of ERC20Bridge, bound to a specific deployed contract.
func NewERC20BridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20BridgeFilterer, error) {
	contract, err := bindERC20Bridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeFilterer{contract: contract}, nil
}

// bindERC20Bridge binds a generic wrapper to an already deployed contract.
func bindERC20Bridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20BridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Bridge *ERC20BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Bridge.Contract.ERC20BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Bridge *ERC20BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.ERC20BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Bridge *ERC20BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.ERC20BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Bridge *ERC20BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Bridge *ERC20BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Bridge *ERC20BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.contract.Transact(opts, method, params...)
}

// CREATEBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x5f217bcc.
//
// Solidity: function CREATE_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeCaller) CREATEBRIDGETOKENSREQUIREDGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "CREATE_BRIDGE_TOKENS_REQUIRED_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CREATEBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x5f217bcc.
//
// Solidity: function CREATE_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeSession) CREATEBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC20Bridge.Contract.CREATEBRIDGETOKENSREQUIREDGAS(&_ERC20Bridge.CallOpts)
}

// CREATEBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x5f217bcc.
//
// Solidity: function CREATE_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeCallerSession) CREATEBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC20Bridge.Contract.CREATEBRIDGETOKENSREQUIREDGAS(&_ERC20Bridge.CallOpts)
}

// MINTBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x7a465fd9.
//
// Solidity: function MINT_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeCaller) MINTBRIDGETOKENSREQUIREDGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "MINT_BRIDGE_TOKENS_REQUIRED_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x7a465fd9.
//
// Solidity: function MINT_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeSession) MINTBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC20Bridge.Contract.MINTBRIDGETOKENSREQUIREDGAS(&_ERC20Bridge.CallOpts)
}

// MINTBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x7a465fd9.
//
// Solidity: function MINT_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeCallerSession) MINTBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC20Bridge.Contract.MINTBRIDGETOKENSREQUIREDGAS(&_ERC20Bridge.CallOpts)
}

// TRANSFERBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x6b47cd9a.
//
// Solidity: function TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeCaller) TRANSFERBRIDGETOKENSREQUIREDGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TRANSFERBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x6b47cd9a.
//
// Solidity: function TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeSession) TRANSFERBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC20Bridge.Contract.TRANSFERBRIDGETOKENSREQUIREDGAS(&_ERC20Bridge.CallOpts)
}

// TRANSFERBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x6b47cd9a.
//
// Solidity: function TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeCallerSession) TRANSFERBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ERC20Bridge.Contract.TRANSFERBRIDGETOKENSREQUIREDGAS(&_ERC20Bridge.CallOpts)
}

// WARPPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x74971856.
//
// Solidity: function WARP_PRECOMPILE_ADDRESS() view returns(address)
func (_ERC20Bridge *ERC20BridgeCaller) WARPPRECOMPILEADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "WARP_PRECOMPILE_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WARPPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x74971856.
//
// Solidity: function WARP_PRECOMPILE_ADDRESS() view returns(address)
func (_ERC20Bridge *ERC20BridgeSession) WARPPRECOMPILEADDRESS() (common.Address, error) {
	return _ERC20Bridge.Contract.WARPPRECOMPILEADDRESS(&_ERC20Bridge.CallOpts)
}

// WARPPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x74971856.
//
// Solidity: function WARP_PRECOMPILE_ADDRESS() view returns(address)
func (_ERC20Bridge *ERC20BridgeCallerSession) WARPPRECOMPILEADDRESS() (common.Address, error) {
	return _ERC20Bridge.Contract.WARPPRECOMPILEADDRESS(&_ERC20Bridge.CallOpts)
}

// BridgedBalances is a free data retrieval call binding the contract method 0xb9e55da1.
//
// Solidity: function bridgedBalances(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(uint256 balance)
func (_ERC20Bridge *ERC20BridgeCaller) BridgedBalances(opts *bind.CallOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "bridgedBalances", destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BridgedBalances is a free data retrieval call binding the contract method 0xb9e55da1.
//
// Solidity: function bridgedBalances(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(uint256 balance)
func (_ERC20Bridge *ERC20BridgeSession) BridgedBalances(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (*big.Int, error) {
	return _ERC20Bridge.Contract.BridgedBalances(&_ERC20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)
}

// BridgedBalances is a free data retrieval call binding the contract method 0xb9e55da1.
//
// Solidity: function bridgedBalances(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(uint256 balance)
func (_ERC20Bridge *ERC20BridgeCallerSession) BridgedBalances(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (*big.Int, error) {
	return _ERC20Bridge.Contract.BridgedBalances(&_ERC20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)
}

// CurrentBlockchainID is a free data retrieval call binding the contract method 0x4950d2d0.
//
// Solidity: function currentBlockchainID() view returns(bytes32)
func (_ERC20Bridge *ERC20BridgeCaller) CurrentBlockchainID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "currentBlockchainID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentBlockchainID is a free data retrieval call binding the contract method 0x4950d2d0.
//
// Solidity: function currentBlockchainID() view returns(bytes32)
func (_ERC20Bridge *ERC20BridgeSession) CurrentBlockchainID() ([32]byte, error) {
	return _ERC20Bridge.Contract.CurrentBlockchainID(&_ERC20Bridge.CallOpts)
}

// CurrentBlockchainID is a free data retrieval call binding the contract method 0x4950d2d0.
//
// Solidity: function currentBlockchainID() view returns(bytes32)
func (_ERC20Bridge *ERC20BridgeCallerSession) CurrentBlockchainID() ([32]byte, error) {
	return _ERC20Bridge.Contract.CurrentBlockchainID(&_ERC20Bridge.CallOpts)
}

// EncodeCreateBridgeTokenData is a free data retrieval call binding the contract method 0x367e9584.
//
// Solidity: function encodeCreateBridgeTokenData(address nativeContractAddress, string nativeName, string nativeSymbol, uint8 nativeDecimals) pure returns(bytes)
func (_ERC20Bridge *ERC20BridgeCaller) EncodeCreateBridgeTokenData(opts *bind.CallOpts, nativeContractAddress common.Address, nativeName string, nativeSymbol string, nativeDecimals uint8) ([]byte, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "encodeCreateBridgeTokenData", nativeContractAddress, nativeName, nativeSymbol, nativeDecimals)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeCreateBridgeTokenData is a free data retrieval call binding the contract method 0x367e9584.
//
// Solidity: function encodeCreateBridgeTokenData(address nativeContractAddress, string nativeName, string nativeSymbol, uint8 nativeDecimals) pure returns(bytes)
func (_ERC20Bridge *ERC20BridgeSession) EncodeCreateBridgeTokenData(nativeContractAddress common.Address, nativeName string, nativeSymbol string, nativeDecimals uint8) ([]byte, error) {
	return _ERC20Bridge.Contract.EncodeCreateBridgeTokenData(&_ERC20Bridge.CallOpts, nativeContractAddress, nativeName, nativeSymbol, nativeDecimals)
}

// EncodeCreateBridgeTokenData is a free data retrieval call binding the contract method 0x367e9584.
//
// Solidity: function encodeCreateBridgeTokenData(address nativeContractAddress, string nativeName, string nativeSymbol, uint8 nativeDecimals) pure returns(bytes)
func (_ERC20Bridge *ERC20BridgeCallerSession) EncodeCreateBridgeTokenData(nativeContractAddress common.Address, nativeName string, nativeSymbol string, nativeDecimals uint8) ([]byte, error) {
	return _ERC20Bridge.Contract.EncodeCreateBridgeTokenData(&_ERC20Bridge.CallOpts, nativeContractAddress, nativeName, nativeSymbol, nativeDecimals)
}

// EncodeMintBridgeTokensData is a free data retrieval call binding the contract method 0xe3642f1a.
//
// Solidity: function encodeMintBridgeTokensData(address nativeContractAddress, address recipient, string cosmosRecipient, uint256 bridgeAmount) pure returns(bytes)
func (_ERC20Bridge *ERC20BridgeCaller) EncodeMintBridgeTokensData(opts *bind.CallOpts, nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, bridgeAmount *big.Int) ([]byte, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "encodeMintBridgeTokensData", nativeContractAddress, recipient, cosmosRecipient, bridgeAmount)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeMintBridgeTokensData is a free data retrieval call binding the contract method 0xe3642f1a.
//
// Solidity: function encodeMintBridgeTokensData(address nativeContractAddress, address recipient, string cosmosRecipient, uint256 bridgeAmount) pure returns(bytes)
func (_ERC20Bridge *ERC20BridgeSession) EncodeMintBridgeTokensData(nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, bridgeAmount *big.Int) ([]byte, error) {
	return _ERC20Bridge.Contract.EncodeMintBridgeTokensData(&_ERC20Bridge.CallOpts, nativeContractAddress, recipient, cosmosRecipient, bridgeAmount)
}

// EncodeMintBridgeTokensData is a free data retrieval call binding the contract method 0xe3642f1a.
//
// Solidity: function encodeMintBridgeTokensData(address nativeContractAddress, address recipient, string cosmosRecipient, uint256 bridgeAmount) pure returns(bytes)
func (_ERC20Bridge *ERC20BridgeCallerSession) EncodeMintBridgeTokensData(nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, bridgeAmount *big.Int) ([]byte, error) {
	return _ERC20Bridge.Contract.EncodeMintBridgeTokensData(&_ERC20Bridge.CallOpts, nativeContractAddress, recipient, cosmosRecipient, bridgeAmount)
}

// EncodeTransferBridgeTokensData is a free data retrieval call binding the contract method 0x8ae279a4.
//
// Solidity: function encodeTransferBridgeTokensData(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContractAddress, address recipient, string cosmosRecipient, uint256 amount, uint256 feeAmount) pure returns(bytes)
func (_ERC20Bridge *ERC20BridgeCaller) EncodeTransferBridgeTokensData(opts *bind.CallOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, amount *big.Int, feeAmount *big.Int) ([]byte, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "encodeTransferBridgeTokensData", destinationBlockchainID, destinationBridgeAddress, nativeContractAddress, recipient, cosmosRecipient, amount, feeAmount)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeTransferBridgeTokensData is a free data retrieval call binding the contract method 0x8ae279a4.
//
// Solidity: function encodeTransferBridgeTokensData(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContractAddress, address recipient, string cosmosRecipient, uint256 amount, uint256 feeAmount) pure returns(bytes)
func (_ERC20Bridge *ERC20BridgeSession) EncodeTransferBridgeTokensData(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, amount *big.Int, feeAmount *big.Int) ([]byte, error) {
	return _ERC20Bridge.Contract.EncodeTransferBridgeTokensData(&_ERC20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeContractAddress, recipient, cosmosRecipient, amount, feeAmount)
}

// EncodeTransferBridgeTokensData is a free data retrieval call binding the contract method 0x8ae279a4.
//
// Solidity: function encodeTransferBridgeTokensData(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContractAddress, address recipient, string cosmosRecipient, uint256 amount, uint256 feeAmount) pure returns(bytes)
func (_ERC20Bridge *ERC20BridgeCallerSession) EncodeTransferBridgeTokensData(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, amount *big.Int, feeAmount *big.Int) ([]byte, error) {
	return _ERC20Bridge.Contract.EncodeTransferBridgeTokensData(&_ERC20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeContractAddress, recipient, cosmosRecipient, amount, feeAmount)
}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeCaller) GetMinTeleporterVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "getMinTeleporterVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeSession) GetMinTeleporterVersion() (*big.Int, error) {
	return _ERC20Bridge.Contract.GetMinTeleporterVersion(&_ERC20Bridge.CallOpts)
}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ERC20Bridge *ERC20BridgeCallerSession) GetMinTeleporterVersion() (*big.Int, error) {
	return _ERC20Bridge.Contract.GetMinTeleporterVersion(&_ERC20Bridge.CallOpts)
}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ERC20Bridge *ERC20BridgeCaller) IsTeleporterAddressPaused(opts *bind.CallOpts, teleporterAddress common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "isTeleporterAddressPaused", teleporterAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ERC20Bridge *ERC20BridgeSession) IsTeleporterAddressPaused(teleporterAddress common.Address) (bool, error) {
	return _ERC20Bridge.Contract.IsTeleporterAddressPaused(&_ERC20Bridge.CallOpts, teleporterAddress)
}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ERC20Bridge *ERC20BridgeCallerSession) IsTeleporterAddressPaused(teleporterAddress common.Address) (bool, error) {
	return _ERC20Bridge.Contract.IsTeleporterAddressPaused(&_ERC20Bridge.CallOpts, teleporterAddress)
}

// NativeToWrappedTokens is a free data retrieval call binding the contract method 0x65435568.
//
// Solidity: function nativeToWrappedTokens(bytes32 nativeBlockchainID, address nativeBridgeAddress, address nativeTokenAddress) view returns(address bridgeTokenAddress)
func (_ERC20Bridge *ERC20BridgeCaller) NativeToWrappedTokens(opts *bind.CallOpts, nativeBlockchainID [32]byte, nativeBridgeAddress common.Address, nativeTokenAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "nativeToWrappedTokens", nativeBlockchainID, nativeBridgeAddress, nativeTokenAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NativeToWrappedTokens is a free data retrieval call binding the contract method 0x65435568.
//
// Solidity: function nativeToWrappedTokens(bytes32 nativeBlockchainID, address nativeBridgeAddress, address nativeTokenAddress) view returns(address bridgeTokenAddress)
func (_ERC20Bridge *ERC20BridgeSession) NativeToWrappedTokens(nativeBlockchainID [32]byte, nativeBridgeAddress common.Address, nativeTokenAddress common.Address) (common.Address, error) {
	return _ERC20Bridge.Contract.NativeToWrappedTokens(&_ERC20Bridge.CallOpts, nativeBlockchainID, nativeBridgeAddress, nativeTokenAddress)
}

// NativeToWrappedTokens is a free data retrieval call binding the contract method 0x65435568.
//
// Solidity: function nativeToWrappedTokens(bytes32 nativeBlockchainID, address nativeBridgeAddress, address nativeTokenAddress) view returns(address bridgeTokenAddress)
func (_ERC20Bridge *ERC20BridgeCallerSession) NativeToWrappedTokens(nativeBlockchainID [32]byte, nativeBridgeAddress common.Address, nativeTokenAddress common.Address) (common.Address, error) {
	return _ERC20Bridge.Contract.NativeToWrappedTokens(&_ERC20Bridge.CallOpts, nativeBlockchainID, nativeBridgeAddress, nativeTokenAddress)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20Bridge *ERC20BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20Bridge *ERC20BridgeSession) Owner() (common.Address, error) {
	return _ERC20Bridge.Contract.Owner(&_ERC20Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20Bridge *ERC20BridgeCallerSession) Owner() (common.Address, error) {
	return _ERC20Bridge.Contract.Owner(&_ERC20Bridge.CallOpts)
}

// SubmittedBridgeTokenCreations is a free data retrieval call binding the contract method 0x8343f661.
//
// Solidity: function submittedBridgeTokenCreations(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(bool tokenCreationSubmitted)
func (_ERC20Bridge *ERC20BridgeCaller) SubmittedBridgeTokenCreations(opts *bind.CallOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "submittedBridgeTokenCreations", destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SubmittedBridgeTokenCreations is a free data retrieval call binding the contract method 0x8343f661.
//
// Solidity: function submittedBridgeTokenCreations(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(bool tokenCreationSubmitted)
func (_ERC20Bridge *ERC20BridgeSession) SubmittedBridgeTokenCreations(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (bool, error) {
	return _ERC20Bridge.Contract.SubmittedBridgeTokenCreations(&_ERC20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)
}

// SubmittedBridgeTokenCreations is a free data retrieval call binding the contract method 0x8343f661.
//
// Solidity: function submittedBridgeTokenCreations(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(bool tokenCreationSubmitted)
func (_ERC20Bridge *ERC20BridgeCallerSession) SubmittedBridgeTokenCreations(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (bool, error) {
	return _ERC20Bridge.Contract.SubmittedBridgeTokenCreations(&_ERC20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)
}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ERC20Bridge *ERC20BridgeCaller) TeleporterRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "teleporterRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ERC20Bridge *ERC20BridgeSession) TeleporterRegistry() (common.Address, error) {
	return _ERC20Bridge.Contract.TeleporterRegistry(&_ERC20Bridge.CallOpts)
}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ERC20Bridge *ERC20BridgeCallerSession) TeleporterRegistry() (common.Address, error) {
	return _ERC20Bridge.Contract.TeleporterRegistry(&_ERC20Bridge.CallOpts)
}

// WrappedTokenContracts is a free data retrieval call binding the contract method 0x9bd9abc0.
//
// Solidity: function wrappedTokenContracts(address bridgeToken) view returns(bool bridgeTokenExists)
func (_ERC20Bridge *ERC20BridgeCaller) WrappedTokenContracts(opts *bind.CallOpts, bridgeToken common.Address) (bool, error) {
	var out []interface{}
	err := _ERC20Bridge.contract.Call(opts, &out, "wrappedTokenContracts", bridgeToken)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WrappedTokenContracts is a free data retrieval call binding the contract method 0x9bd9abc0.
//
// Solidity: function wrappedTokenContracts(address bridgeToken) view returns(bool bridgeTokenExists)
func (_ERC20Bridge *ERC20BridgeSession) WrappedTokenContracts(bridgeToken common.Address) (bool, error) {
	return _ERC20Bridge.Contract.WrappedTokenContracts(&_ERC20Bridge.CallOpts, bridgeToken)
}

// WrappedTokenContracts is a free data retrieval call binding the contract method 0x9bd9abc0.
//
// Solidity: function wrappedTokenContracts(address bridgeToken) view returns(bool bridgeTokenExists)
func (_ERC20Bridge *ERC20BridgeCallerSession) WrappedTokenContracts(bridgeToken common.Address) (bool, error) {
	return _ERC20Bridge.Contract.WrappedTokenContracts(&_ERC20Bridge.CallOpts, bridgeToken)
}

// BridgeTokens is a paid mutator transaction binding the contract method 0xc63d2207.
//
// Solidity: function bridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ERC20Bridge *ERC20BridgeTransactor) BridgeTokens(opts *bind.TransactOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.contract.Transact(opts, "bridgeTokens", destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// BridgeTokens is a paid mutator transaction binding the contract method 0xc63d2207.
//
// Solidity: function bridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ERC20Bridge *ERC20BridgeSession) BridgeTokens(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.BridgeTokens(&_ERC20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// BridgeTokens is a paid mutator transaction binding the contract method 0xc63d2207.
//
// Solidity: function bridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ERC20Bridge *ERC20BridgeTransactorSession) BridgeTokens(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.BridgeTokens(&_ERC20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// IbcBridgeTokens is a paid mutator transaction binding the contract method 0x66a0680d.
//
// Solidity: function ibcBridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, string cosmosRecipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ERC20Bridge *ERC20BridgeTransactor) IbcBridgeTokens(opts *bind.TransactOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, cosmosRecipient string, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.contract.Transact(opts, "ibcBridgeTokens", destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, cosmosRecipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// IbcBridgeTokens is a paid mutator transaction binding the contract method 0x66a0680d.
//
// Solidity: function ibcBridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, string cosmosRecipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ERC20Bridge *ERC20BridgeSession) IbcBridgeTokens(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, cosmosRecipient string, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.IbcBridgeTokens(&_ERC20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, cosmosRecipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// IbcBridgeTokens is a paid mutator transaction binding the contract method 0x66a0680d.
//
// Solidity: function ibcBridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, string cosmosRecipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ERC20Bridge *ERC20BridgeTransactorSession) IbcBridgeTokens(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, cosmosRecipient string, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.IbcBridgeTokens(&_ERC20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, cosmosRecipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20Bridge *ERC20BridgeTransactor) PauseTeleporterAddress(opts *bind.TransactOpts, teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20Bridge.contract.Transact(opts, "pauseTeleporterAddress", teleporterAddress)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20Bridge *ERC20BridgeSession) PauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.PauseTeleporterAddress(&_ERC20Bridge.TransactOpts, teleporterAddress)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20Bridge *ERC20BridgeTransactorSession) PauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.PauseTeleporterAddress(&_ERC20Bridge.TransactOpts, teleporterAddress)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 originBlockchainID, address originSenderAddress, bytes message) returns()
func (_ERC20Bridge *ERC20BridgeTransactor) ReceiveTeleporterMessage(opts *bind.TransactOpts, originBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ERC20Bridge.contract.Transact(opts, "receiveTeleporterMessage", originBlockchainID, originSenderAddress, message)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 originBlockchainID, address originSenderAddress, bytes message) returns()
func (_ERC20Bridge *ERC20BridgeSession) ReceiveTeleporterMessage(originBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.ReceiveTeleporterMessage(&_ERC20Bridge.TransactOpts, originBlockchainID, originSenderAddress, message)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 originBlockchainID, address originSenderAddress, bytes message) returns()
func (_ERC20Bridge *ERC20BridgeTransactorSession) ReceiveTeleporterMessage(originBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.ReceiveTeleporterMessage(&_ERC20Bridge.TransactOpts, originBlockchainID, originSenderAddress, message)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20Bridge *ERC20BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20Bridge *ERC20BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20Bridge.Contract.RenounceOwnership(&_ERC20Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20Bridge *ERC20BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20Bridge.Contract.RenounceOwnership(&_ERC20Bridge.TransactOpts)
}

// SubmitCreateBridgeToken is a paid mutator transaction binding the contract method 0x6c7e40d1.
//
// Solidity: function submitCreateBridgeToken(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeToken, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ERC20Bridge *ERC20BridgeTransactor) SubmitCreateBridgeToken(opts *bind.TransactOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeToken common.Address, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.contract.Transact(opts, "submitCreateBridgeToken", destinationBlockchainID, destinationBridgeAddress, nativeToken, messageFeeAsset, messageFeeAmount)
}

// SubmitCreateBridgeToken is a paid mutator transaction binding the contract method 0x6c7e40d1.
//
// Solidity: function submitCreateBridgeToken(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeToken, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ERC20Bridge *ERC20BridgeSession) SubmitCreateBridgeToken(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeToken common.Address, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.SubmitCreateBridgeToken(&_ERC20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, nativeToken, messageFeeAsset, messageFeeAmount)
}

// SubmitCreateBridgeToken is a paid mutator transaction binding the contract method 0x6c7e40d1.
//
// Solidity: function submitCreateBridgeToken(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeToken, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ERC20Bridge *ERC20BridgeTransactorSession) SubmitCreateBridgeToken(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeToken common.Address, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.SubmitCreateBridgeToken(&_ERC20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, nativeToken, messageFeeAsset, messageFeeAmount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20Bridge *ERC20BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC20Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20Bridge *ERC20BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.TransferOwnership(&_ERC20Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20Bridge *ERC20BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.TransferOwnership(&_ERC20Bridge.TransactOpts, newOwner)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20Bridge *ERC20BridgeTransactor) UnpauseTeleporterAddress(opts *bind.TransactOpts, teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20Bridge.contract.Transact(opts, "unpauseTeleporterAddress", teleporterAddress)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20Bridge *ERC20BridgeSession) UnpauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.UnpauseTeleporterAddress(&_ERC20Bridge.TransactOpts, teleporterAddress)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ERC20Bridge *ERC20BridgeTransactorSession) UnpauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.UnpauseTeleporterAddress(&_ERC20Bridge.TransactOpts, teleporterAddress)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ERC20Bridge *ERC20BridgeTransactor) UpdateMinTeleporterVersion(opts *bind.TransactOpts, version *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.contract.Transact(opts, "updateMinTeleporterVersion", version)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ERC20Bridge *ERC20BridgeSession) UpdateMinTeleporterVersion(version *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.UpdateMinTeleporterVersion(&_ERC20Bridge.TransactOpts, version)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ERC20Bridge *ERC20BridgeTransactorSession) UpdateMinTeleporterVersion(version *big.Int) (*types.Transaction, error) {
	return _ERC20Bridge.Contract.UpdateMinTeleporterVersion(&_ERC20Bridge.TransactOpts, version)
}

// ERC20BridgeBridgeTokensIterator is returned from FilterBridgeTokens and is used to iterate over the raw logs and unpacked data for BridgeTokens events raised by the ERC20Bridge contract.
type ERC20BridgeBridgeTokensIterator struct {
	Event *ERC20BridgeBridgeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BridgeBridgeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BridgeBridgeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BridgeBridgeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BridgeBridgeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BridgeBridgeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BridgeBridgeTokens represents a BridgeTokens event raised by the ERC20Bridge contract.
type ERC20BridgeBridgeTokens struct {
	TokenContractAddress     common.Address
	DestinationBlockchainID  [32]byte
	TeleporterMessageID      *big.Int
	DestinationBridgeAddress common.Address
	Recipient                common.Address
	Amount                   *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterBridgeTokens is a free log retrieval operation binding the contract event 0x97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c31.
//
// Solidity: event BridgeTokens(address indexed tokenContractAddress, bytes32 indexed destinationBlockchainID, uint256 indexed teleporterMessageID, address destinationBridgeAddress, address recipient, uint256 amount)
func (_ERC20Bridge *ERC20BridgeFilterer) FilterBridgeTokens(opts *bind.FilterOpts, tokenContractAddress []common.Address, destinationBlockchainID [][32]byte, teleporterMessageID []*big.Int) (*ERC20BridgeBridgeTokensIterator, error) {

	var tokenContractAddressRule []interface{}
	for _, tokenContractAddressItem := range tokenContractAddress {
		tokenContractAddressRule = append(tokenContractAddressRule, tokenContractAddressItem)
	}
	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ERC20Bridge.contract.FilterLogs(opts, "BridgeTokens", tokenContractAddressRule, destinationBlockchainIDRule, teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeBridgeTokensIterator{contract: _ERC20Bridge.contract, event: "BridgeTokens", logs: logs, sub: sub}, nil
}

// WatchBridgeTokens is a free log subscription operation binding the contract event 0x97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c31.
//
// Solidity: event BridgeTokens(address indexed tokenContractAddress, bytes32 indexed destinationBlockchainID, uint256 indexed teleporterMessageID, address destinationBridgeAddress, address recipient, uint256 amount)
func (_ERC20Bridge *ERC20BridgeFilterer) WatchBridgeTokens(opts *bind.WatchOpts, sink chan<- *ERC20BridgeBridgeTokens, tokenContractAddress []common.Address, destinationBlockchainID [][32]byte, teleporterMessageID []*big.Int) (event.Subscription, error) {

	var tokenContractAddressRule []interface{}
	for _, tokenContractAddressItem := range tokenContractAddress {
		tokenContractAddressRule = append(tokenContractAddressRule, tokenContractAddressItem)
	}
	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ERC20Bridge.contract.WatchLogs(opts, "BridgeTokens", tokenContractAddressRule, destinationBlockchainIDRule, teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BridgeBridgeTokens)
				if err := _ERC20Bridge.contract.UnpackLog(event, "BridgeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeTokens is a log parse operation binding the contract event 0x97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c31.
//
// Solidity: event BridgeTokens(address indexed tokenContractAddress, bytes32 indexed destinationBlockchainID, uint256 indexed teleporterMessageID, address destinationBridgeAddress, address recipient, uint256 amount)
func (_ERC20Bridge *ERC20BridgeFilterer) ParseBridgeTokens(log types.Log) (*ERC20BridgeBridgeTokens, error) {
	event := new(ERC20BridgeBridgeTokens)
	if err := _ERC20Bridge.contract.UnpackLog(event, "BridgeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20BridgeCreateBridgeTokenIterator is returned from FilterCreateBridgeToken and is used to iterate over the raw logs and unpacked data for CreateBridgeToken events raised by the ERC20Bridge contract.
type ERC20BridgeCreateBridgeTokenIterator struct {
	Event *ERC20BridgeCreateBridgeToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BridgeCreateBridgeTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BridgeCreateBridgeToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BridgeCreateBridgeToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BridgeCreateBridgeTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BridgeCreateBridgeTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BridgeCreateBridgeToken represents a CreateBridgeToken event raised by the ERC20Bridge contract.
type ERC20BridgeCreateBridgeToken struct {
	NativeBlockchainID    [32]byte
	NativeBridgeAddress   common.Address
	NativeContractAddress common.Address
	BridgeTokenAddress    common.Address
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterCreateBridgeToken is a free log retrieval operation binding the contract event 0xe1c61a845f79534e11924517ddbedc668d0c20e467eafb4d3bd2858e2815f3b5.
//
// Solidity: event CreateBridgeToken(bytes32 indexed nativeBlockchainID, address indexed nativeBridgeAddress, address indexed nativeContractAddress, address bridgeTokenAddress)
func (_ERC20Bridge *ERC20BridgeFilterer) FilterCreateBridgeToken(opts *bind.FilterOpts, nativeBlockchainID [][32]byte, nativeBridgeAddress []common.Address, nativeContractAddress []common.Address) (*ERC20BridgeCreateBridgeTokenIterator, error) {

	var nativeBlockchainIDRule []interface{}
	for _, nativeBlockchainIDItem := range nativeBlockchainID {
		nativeBlockchainIDRule = append(nativeBlockchainIDRule, nativeBlockchainIDItem)
	}
	var nativeBridgeAddressRule []interface{}
	for _, nativeBridgeAddressItem := range nativeBridgeAddress {
		nativeBridgeAddressRule = append(nativeBridgeAddressRule, nativeBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.FilterLogs(opts, "CreateBridgeToken", nativeBlockchainIDRule, nativeBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeCreateBridgeTokenIterator{contract: _ERC20Bridge.contract, event: "CreateBridgeToken", logs: logs, sub: sub}, nil
}

// WatchCreateBridgeToken is a free log subscription operation binding the contract event 0xe1c61a845f79534e11924517ddbedc668d0c20e467eafb4d3bd2858e2815f3b5.
//
// Solidity: event CreateBridgeToken(bytes32 indexed nativeBlockchainID, address indexed nativeBridgeAddress, address indexed nativeContractAddress, address bridgeTokenAddress)
func (_ERC20Bridge *ERC20BridgeFilterer) WatchCreateBridgeToken(opts *bind.WatchOpts, sink chan<- *ERC20BridgeCreateBridgeToken, nativeBlockchainID [][32]byte, nativeBridgeAddress []common.Address, nativeContractAddress []common.Address) (event.Subscription, error) {

	var nativeBlockchainIDRule []interface{}
	for _, nativeBlockchainIDItem := range nativeBlockchainID {
		nativeBlockchainIDRule = append(nativeBlockchainIDRule, nativeBlockchainIDItem)
	}
	var nativeBridgeAddressRule []interface{}
	for _, nativeBridgeAddressItem := range nativeBridgeAddress {
		nativeBridgeAddressRule = append(nativeBridgeAddressRule, nativeBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.WatchLogs(opts, "CreateBridgeToken", nativeBlockchainIDRule, nativeBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BridgeCreateBridgeToken)
				if err := _ERC20Bridge.contract.UnpackLog(event, "CreateBridgeToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateBridgeToken is a log parse operation binding the contract event 0xe1c61a845f79534e11924517ddbedc668d0c20e467eafb4d3bd2858e2815f3b5.
//
// Solidity: event CreateBridgeToken(bytes32 indexed nativeBlockchainID, address indexed nativeBridgeAddress, address indexed nativeContractAddress, address bridgeTokenAddress)
func (_ERC20Bridge *ERC20BridgeFilterer) ParseCreateBridgeToken(log types.Log) (*ERC20BridgeCreateBridgeToken, error) {
	event := new(ERC20BridgeCreateBridgeToken)
	if err := _ERC20Bridge.contract.UnpackLog(event, "CreateBridgeToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20BridgeMinTeleporterVersionUpdatedIterator is returned from FilterMinTeleporterVersionUpdated and is used to iterate over the raw logs and unpacked data for MinTeleporterVersionUpdated events raised by the ERC20Bridge contract.
type ERC20BridgeMinTeleporterVersionUpdatedIterator struct {
	Event *ERC20BridgeMinTeleporterVersionUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BridgeMinTeleporterVersionUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BridgeMinTeleporterVersionUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BridgeMinTeleporterVersionUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BridgeMinTeleporterVersionUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BridgeMinTeleporterVersionUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BridgeMinTeleporterVersionUpdated represents a MinTeleporterVersionUpdated event raised by the ERC20Bridge contract.
type ERC20BridgeMinTeleporterVersionUpdated struct {
	OldMinTeleporterVersion *big.Int
	NewMinTeleporterVersion *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterMinTeleporterVersionUpdated is a free log retrieval operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ERC20Bridge *ERC20BridgeFilterer) FilterMinTeleporterVersionUpdated(opts *bind.FilterOpts, oldMinTeleporterVersion []*big.Int, newMinTeleporterVersion []*big.Int) (*ERC20BridgeMinTeleporterVersionUpdatedIterator, error) {

	var oldMinTeleporterVersionRule []interface{}
	for _, oldMinTeleporterVersionItem := range oldMinTeleporterVersion {
		oldMinTeleporterVersionRule = append(oldMinTeleporterVersionRule, oldMinTeleporterVersionItem)
	}
	var newMinTeleporterVersionRule []interface{}
	for _, newMinTeleporterVersionItem := range newMinTeleporterVersion {
		newMinTeleporterVersionRule = append(newMinTeleporterVersionRule, newMinTeleporterVersionItem)
	}

	logs, sub, err := _ERC20Bridge.contract.FilterLogs(opts, "MinTeleporterVersionUpdated", oldMinTeleporterVersionRule, newMinTeleporterVersionRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeMinTeleporterVersionUpdatedIterator{contract: _ERC20Bridge.contract, event: "MinTeleporterVersionUpdated", logs: logs, sub: sub}, nil
}

// WatchMinTeleporterVersionUpdated is a free log subscription operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ERC20Bridge *ERC20BridgeFilterer) WatchMinTeleporterVersionUpdated(opts *bind.WatchOpts, sink chan<- *ERC20BridgeMinTeleporterVersionUpdated, oldMinTeleporterVersion []*big.Int, newMinTeleporterVersion []*big.Int) (event.Subscription, error) {

	var oldMinTeleporterVersionRule []interface{}
	for _, oldMinTeleporterVersionItem := range oldMinTeleporterVersion {
		oldMinTeleporterVersionRule = append(oldMinTeleporterVersionRule, oldMinTeleporterVersionItem)
	}
	var newMinTeleporterVersionRule []interface{}
	for _, newMinTeleporterVersionItem := range newMinTeleporterVersion {
		newMinTeleporterVersionRule = append(newMinTeleporterVersionRule, newMinTeleporterVersionItem)
	}

	logs, sub, err := _ERC20Bridge.contract.WatchLogs(opts, "MinTeleporterVersionUpdated", oldMinTeleporterVersionRule, newMinTeleporterVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BridgeMinTeleporterVersionUpdated)
				if err := _ERC20Bridge.contract.UnpackLog(event, "MinTeleporterVersionUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinTeleporterVersionUpdated is a log parse operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ERC20Bridge *ERC20BridgeFilterer) ParseMinTeleporterVersionUpdated(log types.Log) (*ERC20BridgeMinTeleporterVersionUpdated, error) {
	event := new(ERC20BridgeMinTeleporterVersionUpdated)
	if err := _ERC20Bridge.contract.UnpackLog(event, "MinTeleporterVersionUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20BridgeMintBridgeTokensIterator is returned from FilterMintBridgeTokens and is used to iterate over the raw logs and unpacked data for MintBridgeTokens events raised by the ERC20Bridge contract.
type ERC20BridgeMintBridgeTokensIterator struct {
	Event *ERC20BridgeMintBridgeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BridgeMintBridgeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BridgeMintBridgeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BridgeMintBridgeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BridgeMintBridgeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BridgeMintBridgeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BridgeMintBridgeTokens represents a MintBridgeTokens event raised by the ERC20Bridge contract.
type ERC20BridgeMintBridgeTokens struct {
	ContractAddress common.Address
	Recipient       common.Address
	Amount          *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMintBridgeTokens is a free log retrieval operation binding the contract event 0xc0767f158f0d5394b598489a51ed607cd55a8be2dcef113ba1626efcf4c63954.
//
// Solidity: event MintBridgeTokens(address indexed contractAddress, address recipient, uint256 amount)
func (_ERC20Bridge *ERC20BridgeFilterer) FilterMintBridgeTokens(opts *bind.FilterOpts, contractAddress []common.Address) (*ERC20BridgeMintBridgeTokensIterator, error) {

	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.FilterLogs(opts, "MintBridgeTokens", contractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeMintBridgeTokensIterator{contract: _ERC20Bridge.contract, event: "MintBridgeTokens", logs: logs, sub: sub}, nil
}

// WatchMintBridgeTokens is a free log subscription operation binding the contract event 0xc0767f158f0d5394b598489a51ed607cd55a8be2dcef113ba1626efcf4c63954.
//
// Solidity: event MintBridgeTokens(address indexed contractAddress, address recipient, uint256 amount)
func (_ERC20Bridge *ERC20BridgeFilterer) WatchMintBridgeTokens(opts *bind.WatchOpts, sink chan<- *ERC20BridgeMintBridgeTokens, contractAddress []common.Address) (event.Subscription, error) {

	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.WatchLogs(opts, "MintBridgeTokens", contractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BridgeMintBridgeTokens)
				if err := _ERC20Bridge.contract.UnpackLog(event, "MintBridgeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintBridgeTokens is a log parse operation binding the contract event 0xc0767f158f0d5394b598489a51ed607cd55a8be2dcef113ba1626efcf4c63954.
//
// Solidity: event MintBridgeTokens(address indexed contractAddress, address recipient, uint256 amount)
func (_ERC20Bridge *ERC20BridgeFilterer) ParseMintBridgeTokens(log types.Log) (*ERC20BridgeMintBridgeTokens, error) {
	event := new(ERC20BridgeMintBridgeTokens)
	if err := _ERC20Bridge.contract.UnpackLog(event, "MintBridgeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC20Bridge contract.
type ERC20BridgeOwnershipTransferredIterator struct {
	Event *ERC20BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the ERC20Bridge contract.
type ERC20BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20Bridge *ERC20BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC20BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeOwnershipTransferredIterator{contract: _ERC20Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20Bridge *ERC20BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC20BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BridgeOwnershipTransferred)
				if err := _ERC20Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20Bridge *ERC20BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*ERC20BridgeOwnershipTransferred, error) {
	event := new(ERC20BridgeOwnershipTransferred)
	if err := _ERC20Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20BridgeSubmitCreateBridgeTokenIterator is returned from FilterSubmitCreateBridgeToken and is used to iterate over the raw logs and unpacked data for SubmitCreateBridgeToken events raised by the ERC20Bridge contract.
type ERC20BridgeSubmitCreateBridgeTokenIterator struct {
	Event *ERC20BridgeSubmitCreateBridgeToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BridgeSubmitCreateBridgeTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BridgeSubmitCreateBridgeToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BridgeSubmitCreateBridgeToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BridgeSubmitCreateBridgeTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BridgeSubmitCreateBridgeTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BridgeSubmitCreateBridgeToken represents a SubmitCreateBridgeToken event raised by the ERC20Bridge contract.
type ERC20BridgeSubmitCreateBridgeToken struct {
	DestinationBlockchainID  [32]byte
	DestinationBridgeAddress common.Address
	NativeContractAddress    common.Address
	TeleporterMessageID      *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterSubmitCreateBridgeToken is a free log retrieval operation binding the contract event 0x110b902745a3d7d6b66732479f01de654a3bc6e501be7c8ba2c3a6f9868cb539.
//
// Solidity: event SubmitCreateBridgeToken(bytes32 indexed destinationBlockchainID, address indexed destinationBridgeAddress, address indexed nativeContractAddress, uint256 teleporterMessageID)
func (_ERC20Bridge *ERC20BridgeFilterer) FilterSubmitCreateBridgeToken(opts *bind.FilterOpts, destinationBlockchainID [][32]byte, destinationBridgeAddress []common.Address, nativeContractAddress []common.Address) (*ERC20BridgeSubmitCreateBridgeTokenIterator, error) {

	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var destinationBridgeAddressRule []interface{}
	for _, destinationBridgeAddressItem := range destinationBridgeAddress {
		destinationBridgeAddressRule = append(destinationBridgeAddressRule, destinationBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.FilterLogs(opts, "SubmitCreateBridgeToken", destinationBlockchainIDRule, destinationBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeSubmitCreateBridgeTokenIterator{contract: _ERC20Bridge.contract, event: "SubmitCreateBridgeToken", logs: logs, sub: sub}, nil
}

// WatchSubmitCreateBridgeToken is a free log subscription operation binding the contract event 0x110b902745a3d7d6b66732479f01de654a3bc6e501be7c8ba2c3a6f9868cb539.
//
// Solidity: event SubmitCreateBridgeToken(bytes32 indexed destinationBlockchainID, address indexed destinationBridgeAddress, address indexed nativeContractAddress, uint256 teleporterMessageID)
func (_ERC20Bridge *ERC20BridgeFilterer) WatchSubmitCreateBridgeToken(opts *bind.WatchOpts, sink chan<- *ERC20BridgeSubmitCreateBridgeToken, destinationBlockchainID [][32]byte, destinationBridgeAddress []common.Address, nativeContractAddress []common.Address) (event.Subscription, error) {

	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var destinationBridgeAddressRule []interface{}
	for _, destinationBridgeAddressItem := range destinationBridgeAddress {
		destinationBridgeAddressRule = append(destinationBridgeAddressRule, destinationBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.WatchLogs(opts, "SubmitCreateBridgeToken", destinationBlockchainIDRule, destinationBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BridgeSubmitCreateBridgeToken)
				if err := _ERC20Bridge.contract.UnpackLog(event, "SubmitCreateBridgeToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitCreateBridgeToken is a log parse operation binding the contract event 0x110b902745a3d7d6b66732479f01de654a3bc6e501be7c8ba2c3a6f9868cb539.
//
// Solidity: event SubmitCreateBridgeToken(bytes32 indexed destinationBlockchainID, address indexed destinationBridgeAddress, address indexed nativeContractAddress, uint256 teleporterMessageID)
func (_ERC20Bridge *ERC20BridgeFilterer) ParseSubmitCreateBridgeToken(log types.Log) (*ERC20BridgeSubmitCreateBridgeToken, error) {
	event := new(ERC20BridgeSubmitCreateBridgeToken)
	if err := _ERC20Bridge.contract.UnpackLog(event, "SubmitCreateBridgeToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20BridgeTeleporterAddressPausedIterator is returned from FilterTeleporterAddressPaused and is used to iterate over the raw logs and unpacked data for TeleporterAddressPaused events raised by the ERC20Bridge contract.
type ERC20BridgeTeleporterAddressPausedIterator struct {
	Event *ERC20BridgeTeleporterAddressPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BridgeTeleporterAddressPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BridgeTeleporterAddressPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BridgeTeleporterAddressPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BridgeTeleporterAddressPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BridgeTeleporterAddressPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BridgeTeleporterAddressPaused represents a TeleporterAddressPaused event raised by the ERC20Bridge contract.
type ERC20BridgeTeleporterAddressPaused struct {
	TeleporterAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTeleporterAddressPaused is a free log retrieval operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ERC20Bridge *ERC20BridgeFilterer) FilterTeleporterAddressPaused(opts *bind.FilterOpts, teleporterAddress []common.Address) (*ERC20BridgeTeleporterAddressPausedIterator, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.FilterLogs(opts, "TeleporterAddressPaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeTeleporterAddressPausedIterator{contract: _ERC20Bridge.contract, event: "TeleporterAddressPaused", logs: logs, sub: sub}, nil
}

// WatchTeleporterAddressPaused is a free log subscription operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ERC20Bridge *ERC20BridgeFilterer) WatchTeleporterAddressPaused(opts *bind.WatchOpts, sink chan<- *ERC20BridgeTeleporterAddressPaused, teleporterAddress []common.Address) (event.Subscription, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.WatchLogs(opts, "TeleporterAddressPaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BridgeTeleporterAddressPaused)
				if err := _ERC20Bridge.contract.UnpackLog(event, "TeleporterAddressPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeleporterAddressPaused is a log parse operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ERC20Bridge *ERC20BridgeFilterer) ParseTeleporterAddressPaused(log types.Log) (*ERC20BridgeTeleporterAddressPaused, error) {
	event := new(ERC20BridgeTeleporterAddressPaused)
	if err := _ERC20Bridge.contract.UnpackLog(event, "TeleporterAddressPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20BridgeTeleporterAddressUnpausedIterator is returned from FilterTeleporterAddressUnpaused and is used to iterate over the raw logs and unpacked data for TeleporterAddressUnpaused events raised by the ERC20Bridge contract.
type ERC20BridgeTeleporterAddressUnpausedIterator struct {
	Event *ERC20BridgeTeleporterAddressUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BridgeTeleporterAddressUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BridgeTeleporterAddressUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BridgeTeleporterAddressUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BridgeTeleporterAddressUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BridgeTeleporterAddressUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BridgeTeleporterAddressUnpaused represents a TeleporterAddressUnpaused event raised by the ERC20Bridge contract.
type ERC20BridgeTeleporterAddressUnpaused struct {
	TeleporterAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTeleporterAddressUnpaused is a free log retrieval operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ERC20Bridge *ERC20BridgeFilterer) FilterTeleporterAddressUnpaused(opts *bind.FilterOpts, teleporterAddress []common.Address) (*ERC20BridgeTeleporterAddressUnpausedIterator, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.FilterLogs(opts, "TeleporterAddressUnpaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BridgeTeleporterAddressUnpausedIterator{contract: _ERC20Bridge.contract, event: "TeleporterAddressUnpaused", logs: logs, sub: sub}, nil
}

// WatchTeleporterAddressUnpaused is a free log subscription operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ERC20Bridge *ERC20BridgeFilterer) WatchTeleporterAddressUnpaused(opts *bind.WatchOpts, sink chan<- *ERC20BridgeTeleporterAddressUnpaused, teleporterAddress []common.Address) (event.Subscription, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ERC20Bridge.contract.WatchLogs(opts, "TeleporterAddressUnpaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BridgeTeleporterAddressUnpaused)
				if err := _ERC20Bridge.contract.UnpackLog(event, "TeleporterAddressUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeleporterAddressUnpaused is a log parse operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ERC20Bridge *ERC20BridgeFilterer) ParseTeleporterAddressUnpaused(log types.Log) (*ERC20BridgeTeleporterAddressUnpaused, error) {
	event := new(ERC20BridgeTeleporterAddressUnpaused)
	if err := _ERC20Bridge.contract.UnpackLog(event, "TeleporterAddressUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
