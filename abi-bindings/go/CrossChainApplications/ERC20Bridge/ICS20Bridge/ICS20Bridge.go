// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ics20bridge

import (
	"errors"
	"math/big"
	"strings"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/accounts/abi/bind"
	"github.com/ava-labs/subnet-evm/core/types"
	"github.com/ava-labs/subnet-evm/interfaces"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = interfaces.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ICS20BridgeMetaData contains all meta data concerning the ICS20Bridge contract.
var ICS20BridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ibcCh\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"teleporterMessageID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nativeBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeBridgeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"}],\"name\":\"CreateBridgeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldMinTeleporterVersion\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMinTeleporterVersion\",\"type\":\"uint256\"}],\"name\":\"MinTeleporterVersionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintBridgeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teleporterMessageID\",\"type\":\"uint256\"}],\"name\":\"SubmitCreateBridgeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"TeleporterAddressPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"TeleporterAddressUnpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATE_BRIDGE_TOKENS_REQUIRED_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IBC_PRECOMPILE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_BRIDGE_TOKENS_REQUIRED_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WARP_PRECOMPILE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFeeAmount\",\"type\":\"uint256\"}],\"name\":\"bridgeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeTokenContract\",\"type\":\"address\"}],\"name\":\"bridgedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlockchainID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nativeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nativeSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"nativeDecimals\",\"type\":\"uint8\"}],\"name\":\"encodeCreateBridgeTokenData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cosmosRecipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bridgeAmount\",\"type\":\"uint256\"}],\"name\":\"encodeMintBridgeTokensData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cosmosRecipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"encodeTransferBridgeTokensData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTeleporterVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cosmosRecipient\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFeeAmount\",\"type\":\"uint256\"}],\"name\":\"ibcBridgeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ibcChannel\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"isTeleporterAddressPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nativeBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"nativeBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeTokenAddress\",\"type\":\"address\"}],\"name\":\"nativeToWrappedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bridgeTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"pauseTeleporterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"originBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"originSenderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"receiveTeleporterMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"contractERC20\",\"name\":\"nativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"messageFeeAmount\",\"type\":\"uint256\"}],\"name\":\"submitCreateBridgeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationBlockchainID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nativeTokenContract\",\"type\":\"address\"}],\"name\":\"submittedBridgeTokenCreations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tokenCreationSubmitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleporterRegistry\",\"outputs\":[{\"internalType\":\"contractTeleporterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teleporterAddress\",\"type\":\"address\"}],\"name\":\"unpauseTeleporterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"updateMinTeleporterVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeToken\",\"type\":\"address\"}],\"name\":\"wrappedTokenContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bridgeTokenExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162004d2838038062004d28833981016040819052620000349162000238565b600160005581806001600160a01b038116620000bc5760405162461bcd60e51b815260206004820152603760248201527f54656c65706f727465725570677261646561626c653a207a65726f2074656c6560448201527f706f727465722072656769737472792061646472657373000000000000000000606482015260840160405180910390fd5b6001600160a01b03811660808190526040805163301fd1f560e21b8152905163c07f47d4916004808201926020929091908290030181865afa15801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d91906200032e565b600255506200013c33620001d0565b507302000000000000000000000000000000000000056001600160a01b0316634213cf786040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000190573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b691906200032e565b60a0526008620001c78282620003d7565b505050620004a3565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200024c57600080fd5b82516001600160a01b03811681146200026457600080fd5b602084810151919350906001600160401b03808211156200028457600080fd5b818601915086601f8301126200029957600080fd5b815181811115620002ae57620002ae62000222565b604051601f8201601f19908116603f01168101908382118183101715620002d957620002d962000222565b816040528281528986848701011115620002f257600080fd5b600093505b82841015620003165784840186015181850187015292850192620002f7565b60008684830101528096505050505050509250929050565b6000602082840312156200034157600080fd5b5051919050565b600181811c908216806200035d57607f821691505b6020821081036200037e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003d257600081815260208120601f850160051c81016020861015620003ad5750805b601f850160051c820191505b81811015620003ce57828155600101620003b9565b5050505b505050565b81516001600160401b03811115620003f357620003f362000222565b6200040b8162000404845462000348565b8462000384565b602080601f8311600181146200044357600084156200042a5750858301515b600019600386901b1c1916600185901b178555620003ce565b600085815260208120601f198616915b82811015620004745788860151825594840194600190910190840162000453565b5085821015620004935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051614835620004f360003960008181610272015281816107c60152818161190f01526125830152600081816101d701528181610ea60152818161110f0152611b5e01526148356000f3fe60806040523480156200001157600080fd5b5060043610620001cc5760003560e01c806374971856116200010d5780639bd9abc011620000a3578063c868efaa116200007a578063c868efaa1462000471578063d2cc7a701462000488578063e3642f1a1462000491578063f2fde38b14620004a857600080fd5b80639bd9abc01462000400578063b9e55da11462000426578063c63d2207146200045a57600080fd5b80638343f66111620000e45780638343f66114620003785780638ae279a414620003c05780638da5cb5b14620003d75780639731429714620003e957600080fd5b806374971856146200034f5780637622e5ec146200035e5780637a465fd9146200036d57600080fd5b80635f217bcc116200018357806366a0680d116200015a57806366a0680d146200030c5780636b47cd9a14620003235780636c7e40d1146200032e578063715018a6146200034557600080fd5b80635f217bcc14620002ba5780635f56f04d14620002c55780636543556814620002cf57600080fd5b80631a7f5bec14620001d15780632b0d8f181462000216578063367e9584146200022f5780634511243e14620002555780634950d2d0146200026c5780635eb9951414620002a3575b600080fd5b620001f97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6200022d6200022736600462002815565b620004bf565b005b620002466200024036600462002914565b620005ba565b6040516200020d9190620029fb565b6200022d6200026636600462002815565b62000619565b620002947f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016200020d565b6200022d620002b436600462002a10565b6200070c565b62000294621e848081565b6200024662000724565b620001f9620002e036600462002a2a565b60076020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b6200022d6200031d36600462002a71565b620007ba565b62000294620493e081565b6200022d6200033f36600462002b14565b62000a77565b6200022d62000dc7565b620001f96005600160991b0181565b620001f96002600360981b0181565b6200029462030d4081565b620003af6200038936600462002a2a565b600460209081526000938452604080852082529284528284209052825290205460ff1681565b60405190151581526020016200020d565b62000246620003d136600462002b76565b62000ddf565b6003546001600160a01b0316620001f9565b620003af620003fa36600462002815565b62000e46565b620003af6200041136600462002815565b60066020526000908152604090205460ff1681565b620002946200043736600462002a2a565b600560209081526000938452604080852082529284528284209052825290205481565b6200022d6200046b36600462002c11565b62000e64565b6200022d6200048236600462002c86565b62000e8e565b60025462000294565b62000246620004a236600462002d15565b62001041565b6200022d620004b936600462002815565b62001085565b620004c962001101565b6001600160a01b038116620004fb5760405162461bcd60e51b8152600401620004f29062002d86565b60405180910390fd5b620005068162000e46565b156200056b5760405162461bcd60e51b815260206004820152602d60248201527f54656c65706f727465725570677261646561626c653a2061646472657373206160448201526c1b1c9958591e481c185d5cd959609a1b6064820152608401620004f2565b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517f933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c9190a250565b6060600085858585604051602001620005d7949392919062002dd4565b6040516020818303038152906040529050600081604051602001620005fe92919062002e39565b6040516020818303038152906040529150505b949350505050565b6200062362001101565b6001600160a01b0381166200064c5760405162461bcd60e51b8152600401620004f29062002d86565b620006578162000e46565b620006b75760405162461bcd60e51b815260206004820152602960248201527f54656c65706f727465725570677261646561626c653a2061646472657373206e6044820152681bdd081c185d5cd95960ba1b6064820152608401620004f2565b6040516001600160a01b038216907f844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c390600090a26001600160a01b03166000908152600160205260409020805460ff19169055565b6200071662001101565b62000721816200110b565b50565b60088054620007339062002e73565b80601f0160208091040260200160405190810160405280929190818152602001828054620007619062002e73565b8015620007b25780601f106200078657610100808354040283529160200191620007b2565b820191906000526020600020905b8154815290600101906020018083116200079457829003601f168201915b505050505081565b620007c4620012b2565b7f00000000000000000000000000000000000000000000000000000000000000008803620008065760405162461bcd60e51b8152600401620004f29062002eaf565b6001600160a01b0385166200082f5760405162461bcd60e51b8152600401620004f29062002ef7565b6001600160a01b038716620008585760405162461bcd60e51b8152600401620004f29062002f3a565b6001600160a01b03861660009081526006602052604090205460ff16156200094a5762000886818362002f9c565b8311620008e55760405162461bcd60e51b815260206004820152602660248201527f45524332304272696467653a20696e73756666696369656e7420746f74616c20604482015265185b5bdd5b9d60d21b6064820152608401620004f2565b620009446040518061010001604052808a8152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001868152602001858152602001848152602001838152506200130d565b62000a62565b60008881526004602090815260408083206001600160a01b03808c168552908352818420908a16845290915290205460ff16620009dc5760405162461bcd60e51b815260206004820152602960248201527f45524332304272696467653a20696e76616c69642062726964676520746f6b656044820152686e206164647265737360b81b6064820152608401620004f2565b6000620009ea87856200171b565b905082811162000a4f5760405162461bcd60e51b815260206004820152602960248201527f45524332304272696467653a20696e73756666696369656e742061646a757374604482015268195908185b5bdd5b9d60ba1b6064820152608401620004f2565b62000a608989898989868962001891565b505b62000a6d6001600055565b5050505050505050565b62000a81620012b2565b6001600160a01b03841662000aaa5760405162461bcd60e51b8152600401620004f29062002f3a565b600062000ab662001b59565b90506000821562000ae55762000acd84846200171b565b905062000ae56001600160a01b038516838362001c5b565b600062000c2386876001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000b2b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000b5591908101906200300b565b886001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000b94573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000bbe91908101906200300b565b896001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000bfd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000240919062003043565b90506000836001600160a01b031663624488506040518060c001604052808c81526020018b6001600160a01b0316815260200160405180604001604052808b6001600160a01b03168152602001888152508152602001621e8480815260200160006001600160401b0381111562000c9e5762000c9e62002835565b60405190808252806020026020018201604052801562000cc8578160200160208202803683370190505b508152602001858152506040518263ffffffff1660e01b815260040162000cf09190620030a9565b6020604051808303816000875af115801562000d10573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d3691906200312b565b60008a81526004602090815260408083206001600160a01b03808e16808652918452828520908d16808652935292819020805460ff1916600117905551929350918b907f110b902745a3d7d6b66732479f01de654a3bc6e501be7c8ba2c3a6f9868cb5399062000da99086815260200190565b60405180910390a45050505062000dc06001600055565b5050505050565b62000dd162001d47565b62000ddd600062001da3565b565b606060008888888888888860405160200162000e02979695949392919062003145565b604051602081830303815290604052905060028160405160200162000e2992919062002e39565b604051602081830303815290604052915050979650505050505050565b6001600160a01b031660009081526001602052604090205460ff1690565b62000e858787878760405180602001604052806000815250888888620007ba565b50505050505050565b60025460405163260f846760e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634c1f08ce90602401602060405180830381865afa15801562000ef6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f1c91906200312b565b101562000f855760405162461bcd60e51b815260206004820152603060248201527f54656c65706f727465725570677261646561626c653a20696e76616c6964205460448201526f32b632b837b93a32b91039b2b73232b960811b6064820152608401620004f2565b62000f903362000e46565b1562000ff85760405162461bcd60e51b815260206004820152603060248201527f54656c65706f727465725570677261646561626c653a2054656c65706f72746560448201526f1c881859191c995cdcc81c185d5cd95960821b6064820152608401620004f2565b6200103b848484848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062001df592505050565b50505050565b60606000858585856040516020016200105e949392919062003197565b6040516020818303038152906040529050600181604051602001620005fe92919062002e39565b6200108f62001d47565b6001600160a01b038116620010f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620004f2565b620007218162001da3565b62000ddd62001d47565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c07f47d46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200116c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200119291906200312b565b60025490915081831115620012045760405162461bcd60e51b815260206004820152603160248201527f54656c65706f727465725570677261646561626c653a20696e76616c6964205460448201527032b632b837b93a32b9103b32b939b4b7b760791b6064820152608401620004f2565b8083116200127b5760405162461bcd60e51b815260206004820152603f60248201527f54656c65706f727465725570677261646561626c653a206e6f7420677265617460448201527f6572207468616e2063757272656e74206d696e696d756d2076657273696f6e006064820152608401620004f2565b6002839055604051839082907fa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d90600090a3505050565b600260005403620013065760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620004f2565b6002600055565b60006200131962001b59565b90506000808360c0015111156200135c576200133e83604001518460c001516200171b565b60408401519091506200135c906001600160a01b0316838362001c5b565b60008360c001518460a00151620013749190620031d6565b604085810151905163079cc67960e41b815233600482015260248101839052919250906001600160a01b038216906379cc679090604401600060405180830381600087803b158015620013c657600080fd5b505af1158015620013db573d6000803e3d6000fd5b505050506000816001600160a01b031663f72539686040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200144691906200312b565b90506000826001600160a01b0316631a0b79bf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001489573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014af9190620031ec565b905081876000015103620014f557806001600160a01b031687602001516001600160a01b031614620014f55760405162461bcd60e51b8152600401620004f2906200320c565b60006200158088600001518960200151866001600160a01b03166374d32ad46040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200156a9190620031ec565b8b606001518c608001518a8e60e0015162000ddf565b90506000876001600160a01b031663624488506040518060c00160405280878152602001866001600160a01b0316815260200160405180604001604052808e604001516001600160a01b031681526020018c8152508152602001620493e0815260200160006001600160401b03811115620015ff57620015ff62002835565b60405190808252806020026020018201604052801562001629578160200160208202803683370190505b508152602001858152506040518263ffffffff1660e01b8152600401620016519190620030a9565b6020604051808303816000875af115801562001671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200169791906200312b565b90508089600001518a604001516001600160a01b03167f97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c318c602001518d606001518b60405162001708939291906001600160a01b039384168152919092166020820152604081019190915260600190565b60405180910390a4505050505050505050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a0823190602401602060405180830381865afa15801562001765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200178b91906200312b565b9050620017a46001600160a01b03851633308662001f74565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015620017ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200181291906200312b565b90508181116200187a5760405162461bcd60e51b815260206004820152602c60248201527f5361666545524332305472616e7366657246726f6d3a2062616c616e6365206e60448201526b1bdd081a5b98dc99585cd95960a21b6064820152608401620004f2565b620018868282620031d6565b925050505b92915050565b6001600160a01b03851660009081526006602052604090205460ff16156200190d5760405162461bcd60e51b815260206004820152602860248201527f45524332304272696467653a2063616e6e6f742062726964676520777261707060448201526732b2103a37b5b2b760c11b6064820152608401620004f2565b7f000000000000000000000000000000000000000000000000000000000000000087036200194f5760405162461bcd60e51b8152600401620004f29062002eaf565b60006200195b62001b59565b905081156200197a576200197a6001600160a01b038716828462001c5b565b6000620019888385620031d6565b60008a81526005602090815260408083206001600160a01b03808e168552908352818420908c168452909152812080549293508392909190620019cd90849062002f9c565b9091555060009050620019e38888888562001041565b90506000836001600160a01b031663624488506040518060c001604052808e81526020018d6001600160a01b0316815260200160405180604001604052808e6001600160a01b031681526020018a815250815260200162030d40815260200160006001600160401b0381111562001a5e5762001a5e62002835565b60405190808252806020026020018201604052801562001a88578160200160208202803683370190505b508152602001858152506040518263ffffffff1660e01b815260040162001ab09190620030a9565b6020604051808303816000875af115801562001ad0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001af691906200312b565b604080516001600160a01b038d811682528b8116602083015291810186905291925082918d918c16907f97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c319060600160405180910390a45050505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d820e64f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001bbb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001be19190620031ec565b905062001bee8162000e46565b1562001c565760405162461bcd60e51b815260206004820152603060248201527f54656c65706f727465725570677261646561626c653a2054656c65706f72746560448201526f1c881cd95b991a5b99c81c185d5cd95960821b6064820152608401620004f2565b919050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa15801562001cad573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001cd391906200312b565b62001cdf919062002f9c565b6040516001600160a01b0385166024820152604481018290529091506200103b90859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915262001fae565b6003546001600160a01b0316331462000ddd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620004f2565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000808280602001905181019062001e0e91906200325b565b9092509050600082600281111562001e2a5762001e2a62002e23565b0362001e6e576000806000808480602001905181019062001e4c9190620032c9565b935093509350935062001e648989868686866200208c565b5050505062000dc0565b600182600281111562001e855762001e8562002e23565b0362001ebf576000806000808480602001905181019062001ea7919062003352565b935093509350935062001e64898986868686620021fb565b600282600281111562001ed65762001ed662002e23565b0362001f2b5760008060008060008060008780602001905181019062001efd9190620033c5565b965096509650965096509650965062001f1e8c8c898989898989896200245f565b5050505050505062000dc0565b60405162461bcd60e51b815260206004820152601b60248201527f45524332304272696467653a20696e76616c696420616374696f6e00000000006044820152606401620004f2565b6040516001600160a01b03808516602483015283166044820152606481018290526200103b9085906323b872dd60e01b9060840162001d0f565b600062002005826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200261a9092919063ffffffff16565b80519091501562002087578080602001905181019062002026919062003463565b620020875760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401620004f2565b505050565b60008681526007602090815260408083206001600160a01b03898116855290835281842088821685529092529091205416156200211d5760405162461bcd60e51b815260206004820152602860248201527f45524332304272696467653a2062726964676520746f6b656e20616c72656164604482015267792065786973747360c01b6064820152608401620004f2565b60008686868686866040516200213390620027f1565b620021449695949392919062003487565b604051809103906000f08015801562002161573d6000803e3d6000fd5b506001600160a01b038181166000818152600660209081526040808320805460ff191660011790558c8352600782528083208c8616808552908352818420958c168085529583529281902080546001600160a01b031916851790555192835293945091928a917fe1c61a845f79534e11924517ddbedc668d0c20e467eafb4d3bd2858e2815f3b5910160405180910390a450505050505050565b62002205620012b2565b6001600160a01b0383166200222e5760405162461bcd60e51b8152600401620004f29062002ef7565b60008681526007602090815260408083206001600160a01b03808a1685529083528184208882168552909252909120541680620022bf5760405162461bcd60e51b815260206004820152602860248201527f45524332304272696467653a2062726964676520746f6b656e20646f6573206e6044820152671bdd08195e1a5cdd60c21b6064820152608401620004f2565b60006040518060400160405280600081526020016000815250905060006040518060a00160405280846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562002326573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200235091908101906200300b565b81526020018581526020013360405160200162002385919060609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405281526020018681526020016040518060200160405280600081525081525090506002600360981b016001600160a01b0316636052bf6f6000600885600086604051602001620023e49190620034e6565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401620024159594939291906200356d565b600060405180830381600087803b1580156200243057600080fd5b505af115801562002445573d6000803e3d6000fd5b50505050505050620024576001600055565b505050505050565b62002469620012b2565b6001600160a01b038416620024925760405162461bcd60e51b8152600401620004f29062002ef7565b6001600160a01b038616620024bb5760405162461bcd60e51b8152600401620004f29062002f3a565b60008981526005602090815260408083206001600160a01b03808d168552908352818420908916845290915290205482811015620025465760405162461bcd60e51b815260206004820152602160248201527f45524332304272696467653a20696e73756666696369656e742062616c616e636044820152606560f81b6064820152608401620004f2565b620025528382620031d6565b60008b81526005602090815260408083206001600160a01b03808f168552908352818420908b1684529091529020557f00000000000000000000000000000000000000000000000000000000000000008803620025f1576001600160a01b0387163014620025d45760405162461bcd60e51b8152600401620004f2906200320c565b620025ea6001600160a01b038716868562002635565b5062002604565b620026028888888888888862001891565b505b6200260f6001600055565b505050505050505050565b60606200262b848460008562002667565b90505b9392505050565b6040516001600160a01b0383166024820152604481018290526200208790849063a9059cbb60e01b9060640162001d0f565b606082471015620026ca5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401620004f2565b600080866001600160a01b03168587604051620026e8919062003679565b60006040518083038185875af1925050503d806000811462002727576040519150601f19603f3d011682016040523d82523d6000602084013e6200272c565b606091505b50915091506200273f878383876200274a565b979650505050505050565b60608315620027be578251600003620027b6576001600160a01b0385163b620027b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401620004f2565b508162000611565b620006118383815115620027d55781518083602001fd5b8060405162461bcd60e51b8152600401620004f29190620029fb565b611168806200369883390190565b6001600160a01b03811681146200072157600080fd5b6000602082840312156200282857600080fd5b81356200262e81620027ff565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562002876576200287662002835565b604052919050565b60006001600160401b038211156200289a576200289a62002835565b50601f01601f191660200190565b600082601f830112620028ba57600080fd5b8135620028d1620028cb826200287e565b6200284b565b818152846020838601011115620028e757600080fd5b816020850160208301376000918101602001919091529392505050565b60ff811681146200072157600080fd5b600080600080608085870312156200292b57600080fd5b84356200293881620027ff565b935060208501356001600160401b03808211156200295557600080fd5b6200296388838901620028a8565b945060408701359150808211156200297a57600080fd5b506200298987828801620028a8565b92505060608501356200299c8162002904565b939692955090935050565b60005b83811015620029c4578181015183820152602001620029aa565b50506000910152565b60008151808452620029e7816020860160208601620029a7565b601f01601f19169290920160200192915050565b6020815260006200262e6020830184620029cd565b60006020828403121562002a2357600080fd5b5035919050565b60008060006060848603121562002a4057600080fd5b83359250602084013562002a5481620027ff565b9150604084013562002a6681620027ff565b809150509250925092565b600080600080600080600080610100898b03121562002a8f57600080fd5b88359750602089013562002aa381620027ff565b9650604089013562002ab581620027ff565b9550606089013562002ac781620027ff565b945060808901356001600160401b0381111562002ae357600080fd5b62002af18b828c01620028a8565b989b979a50959894979660a0860135965060c08601359560e00135945092505050565b600080600080600060a0868803121562002b2d57600080fd5b85359450602086013562002b4181620027ff565b9350604086013562002b5381620027ff565b9250606086013562002b6581620027ff565b949793965091946080013592915050565b600080600080600080600060e0888a03121562002b9257600080fd5b87359650602088013562002ba681620027ff565b9550604088013562002bb881620027ff565b9450606088013562002bca81620027ff565b935060808801356001600160401b0381111562002be657600080fd5b62002bf48a828b01620028a8565b93505060a0880135915060c0880135905092959891949750929550565b600080600080600080600060e0888a03121562002c2d57600080fd5b87359650602088013562002c4181620027ff565b9550604088013562002c5381620027ff565b9450606088013562002c6581620027ff565b9699959850939660808101359560a0820135955060c0909101359350915050565b6000806000806060858703121562002c9d57600080fd5b84359350602085013562002cb181620027ff565b925060408501356001600160401b038082111562002cce57600080fd5b818701915087601f83011262002ce357600080fd5b81358181111562002cf357600080fd5b88602082850101111562002d0657600080fd5b95989497505060200194505050565b6000806000806080858703121562002d2c57600080fd5b843562002d3981620027ff565b9350602085013562002d4b81620027ff565b925060408501356001600160401b0381111562002d6757600080fd5b62002d7587828801620028a8565b949793965093946060013593505050565b6020808252602e908201527f54656c65706f727465725570677261646561626c653a207a65726f2054656c6560408201526d706f72746572206164647265737360901b606082015260800190565b6001600160a01b038516815260806020820181905260009062002dfa90830186620029cd565b828103604084015262002e0e8186620029cd565b91505060ff8316606083015295945050505050565b634e487b7160e01b600052602160045260246000fd5b60006003841062002e5a57634e487b7160e01b600052602160045260246000fd5b838252604060208301526200262b6040830184620029cd565b600181811c9082168062002e8857607f821691505b60208210810362002ea957634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526028908201527f45524332304272696467653a2063616e6e6f742062726964676520746f20736160408201526736b29031b430b4b760c11b606082015260800190565b60208082526023908201527f45524332304272696467653a207a65726f20726563697069656e74206164647260408201526265737360e81b606082015260800190565b6020808252602c908201527f45524332304272696467653a207a65726f2064657374696e6174696f6e20627260408201526b69646765206164647265737360a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b808201808211156200188b576200188b62002f86565b600062002fc3620028cb846200287e565b905082815283838301111562002fd857600080fd5b6200262e836020830184620029a7565b600082601f83011262002ffa57600080fd5b6200262e8383516020850162002fb2565b6000602082840312156200301e57600080fd5b81516001600160401b038111156200303557600080fd5b620006118482850162002fe8565b6000602082840312156200305657600080fd5b81516200262e8162002904565b600081518084526020808501945080840160005b838110156200309e5781516001600160a01b03168752958201959082019060010162003077565b509495945050505050565b60208152815160208201526000602083015160018060a01b03808216604085015260408501519150808251166060850152506020810151608084015250606083015160a0830152608083015160e060c08401526200310c61010084018262003063565b905060a0840151601f198483030160e0850152620018868282620029cd565b6000602082840312156200313e57600080fd5b5051919050565b8781526001600160a01b03878116602083015286811660408301528516606082015260e0608082018190526000906200318190830186620029cd565b60a08301949094525060c0015295945050505050565b6001600160a01b03858116825284166020820152608060408201819052600090620031c590830185620029cd565b905082606083015295945050505050565b818103818111156200188b576200188b62002f86565b600060208284031215620031ff57600080fd5b81516200262e81620027ff565b6020808252602f908201527f45524332304272696467653a20696e76616c69642064657374696e6174696f6e60408201526e20627269646765206164647265737360881b606082015260800190565b600080604083850312156200326f57600080fd5b8251600381106200327f57600080fd5b60208401519092506001600160401b038111156200329c57600080fd5b8301601f81018513620032ae57600080fd5b620032bf8582516020840162002fb2565b9150509250929050565b60008060008060808587031215620032e057600080fd5b8451620032ed81620027ff565b60208601519094506001600160401b03808211156200330b57600080fd5b620033198883890162002fe8565b945060408701519150808211156200333057600080fd5b506200333f8782880162002fe8565b92505060608501516200299c8162002904565b600080600080608085870312156200336957600080fd5b84516200337681620027ff565b60208601519094506200338981620027ff565b60408601519093506001600160401b03811115620033a657600080fd5b620033b48782880162002fe8565b606096909601519497939650505050565b600080600080600080600060e0888a031215620033e157600080fd5b875196506020880151620033f581620027ff565b60408901519096506200340881620027ff565b60608901519095506200341b81620027ff565b60808901519094506001600160401b038111156200343857600080fd5b620034468a828b0162002fe8565b93505060a0880151915060c0880151905092959891949750929550565b6000602082840312156200347657600080fd5b815180151581146200262e57600080fd5b8681526001600160a01b0386811660208301528516604082015260c060608201819052600090620034bb90830186620029cd565b8281036080840152620034cf8186620029cd565b91505060ff831660a0830152979650505050505050565b602081526000825160a060208401526200350460c0840182620029cd565b9050602084015160408401526040840151601f19808584030160608601526200352e8383620029cd565b925060608601519150808584030160808601526200354d8383620029cd565b925060808601519150808584030160a086015250620018868282620029cd565b8581526000602060e081840152600860e0840152673a3930b739b332b960c11b6101008401526101208060408501526000885481600182811c915080831680620035b857607f831692505b8683108103620035d657634e487b7160e01b85526022600452602485fd5b94880182815260200194808015620035f757600181146200360e576200363b565b60ff198516875283151560051b870195506200363b565b60008e81526020902060005b8581101562003635578154898201529084019089016200361a565b88019650505b50508a516060890152505050602088015160808601528660a086015284810360c08601526200366b8187620029cd565b9a9950505050505050505050565b600082516200368d818460208701620029a7565b919091019291505056fe6101206040523480156200001257600080fd5b506040516200116838038062001168833981016040819052620000359162000292565b82826003620000458382620003d5565b506004620000548282620003d5565b50879150620000b690505760405162461bcd60e51b815260206004820152602160248201527f427269646765546f6b656e3a207a65726f20736f7572636520636861696e20696044820152601960fa1b60648201526084015b60405180910390fd5b6001600160a01b0385166200011e5760405162461bcd60e51b815260206004820152602760248201527f427269646765546f6b656e3a207a65726f20736f7572636520627269646765206044820152666164647265737360c81b6064820152608401620000ad565b6001600160a01b038416620001855760405162461bcd60e51b815260206004820152602660248201527f427269646765546f6b656e3a207a65726f20736f75726365206173736574206160448201526564647265737360d01b6064820152608401620000ad565b3360805260a09590955250506001600160a01b0391821660c0521660e05260ff1661010052620004a1565b80516001600160a01b0381168114620001c857600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f557600080fd5b81516001600160401b0380821115620002125762000212620001cd565b604051601f8301601f19908116603f011681019082821181831017156200023d576200023d620001cd565b816040528381526020925086838588010111156200025a57600080fd5b600091505b838210156200027e57858201830151818301840152908201906200025f565b600093810190920192909252949350505050565b60008060008060008060c08789031215620002ac57600080fd5b86519550620002be60208801620001b0565b9450620002ce60408801620001b0565b60608801519094506001600160401b0380821115620002ec57600080fd5b620002fa8a838b01620001e3565b945060808901519150808211156200031157600080fd5b506200032089828a01620001e3565b92505060a087015160ff811681146200033857600080fd5b809150509295509295509295565b600181811c908216806200035b57607f821691505b6020821081036200037c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003d057600081815260208120601f850160051c81016020861015620003ab5750805b601f850160051c820191505b81811015620003cc57828155600101620003b7565b5050505b505050565b81516001600160401b03811115620003f157620003f1620001cd565b620004098162000402845462000346565b8462000382565b602080601f831160018114620004415760008415620004285750858301515b600019600386901b1c1916600185901b178555620003cc565b600085815260208120601f198616915b82811015620004725788860151825594840194600190910190840162000451565b5085821015620004915787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610c7b620004ed60003960006101c70152600061025a01526000610173015260006102fc0152600081816102c2015261041b0152610c7b6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d714610297578063a9059cbb146102aa578063cd596583146102bd578063dd62ed3e146102e4578063f7253968146102f757600080fd5b806370a082311461022c57806374d32ad41461025557806379cc67901461027c57806395d89b411461028f57600080fd5b806323b872dd116100e957806323b872dd146101ad578063313ce567146101c057806339509351146101f157806340c10f191461020457806342966c681461021957600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c5780631a0b79bf1461016e575b600080fd5b61012361031e565b6040516101309190610aac565b60405180910390f35b61014c610147366004610b16565b6103b0565b6040519015158152602001610130565b6002545b604051908152602001610130565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610130565b61014c6101bb366004610b40565b6103ca565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610130565b61014c6101ff366004610b16565b6103ee565b610217610212366004610b16565b610410565b005b610217610227366004610b7c565b61049b565b61016061023a366004610b95565b6001600160a01b031660009081526020819052604090205490565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b61021761028a366004610b16565b6104a8565b6101236104bd565b61014c6102a5366004610b16565b6104cc565b61014c6102b8366004610b16565b610547565b6101957f000000000000000000000000000000000000000000000000000000000000000081565b6101606102f2366004610bb7565b610555565b6101607f000000000000000000000000000000000000000000000000000000000000000081565b60606003805461032d90610bea565b80601f016020809104026020016040519081016040528092919081815260200182805461035990610bea565b80156103a65780601f1061037b576101008083540402835291602001916103a6565b820191906000526020600020905b81548152906001019060200180831161038957829003601f168201915b5050505050905090565b6000336103be818585610580565b60019150505b92915050565b6000336103d88582856106a5565b6103e385858561071f565b506001949350505050565b6000336103be8185856104018383610555565b61040b9190610c24565b610580565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461048d5760405162461bcd60e51b815260206004820152601960248201527f427269646765546f6b656e3a20756e617574686f72697a65640000000000000060448201526064015b60405180910390fd5b61049782826108c3565b5050565b6104a53382610982565b50565b6104b38233836106a5565b6104978282610982565b60606004805461032d90610bea565b600033816104da8286610555565b90508381101561053a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610484565b6103e38286868403610580565b6000336103be81858561071f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105e25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610484565b6001600160a01b0382166106435760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610484565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006106b18484610555565b90506000198114610719578181101561070c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610484565b6107198484848403610580565b50505050565b6001600160a01b0383166107835760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610484565b6001600160a01b0382166107e55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610484565b6001600160a01b0383166000908152602081905260409020548181101561085d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610484565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610719565b6001600160a01b0382166109195760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610484565b806002600082825461092b9190610c24565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b0382166109e25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610484565b6001600160a01b03821660009081526020819052604090205481811015610a565760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610484565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610698565b600060208083528351808285015260005b81811015610ad957858101830151858201604001528201610abd565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610b1157600080fd5b919050565b60008060408385031215610b2957600080fd5b610b3283610afa565b946020939093013593505050565b600080600060608486031215610b5557600080fd5b610b5e84610afa565b9250610b6c60208501610afa565b9150604084013590509250925092565b600060208284031215610b8e57600080fd5b5035919050565b600060208284031215610ba757600080fd5b610bb082610afa565b9392505050565b60008060408385031215610bca57600080fd5b610bd383610afa565b9150610be160208401610afa565b90509250929050565b600181811c90821680610bfe57607f821691505b602082108103610c1e57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156103c457634e487b7160e01b600052601160045260246000fdfea26469706673582212208a8e82a679ec260481bb5d10cf7933d8213beeeb9291c42d2ad6b12aa8eb16e264736f6c63430008120033a264697066735822122071239bd1e61080ed4149d0618a768f5994103c4fec154967b8dab3b5cffc219964736f6c63430008120033",
}

// ICS20BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use ICS20BridgeMetaData.ABI instead.
var ICS20BridgeABI = ICS20BridgeMetaData.ABI

// ICS20BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ICS20BridgeMetaData.Bin instead.
var ICS20BridgeBin = ICS20BridgeMetaData.Bin

// DeployICS20Bridge deploys a new Ethereum contract, binding an instance of ICS20Bridge to it.
func DeployICS20Bridge(auth *bind.TransactOpts, backend bind.ContractBackend, teleporterRegistryAddress common.Address, ibcCh string) (common.Address, *types.Transaction, *ICS20Bridge, error) {
	parsed, err := ICS20BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ICS20BridgeBin), backend, teleporterRegistryAddress, ibcCh)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ICS20Bridge{ICS20BridgeCaller: ICS20BridgeCaller{contract: contract}, ICS20BridgeTransactor: ICS20BridgeTransactor{contract: contract}, ICS20BridgeFilterer: ICS20BridgeFilterer{contract: contract}}, nil
}

// ICS20Bridge is an auto generated Go binding around an Ethereum contract.
type ICS20Bridge struct {
	ICS20BridgeCaller     // Read-only binding to the contract
	ICS20BridgeTransactor // Write-only binding to the contract
	ICS20BridgeFilterer   // Log filterer for contract events
}

// ICS20BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ICS20BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICS20BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ICS20BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICS20BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ICS20BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ICS20BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ICS20BridgeSession struct {
	Contract     *ICS20Bridge      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ICS20BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ICS20BridgeCallerSession struct {
	Contract *ICS20BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ICS20BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ICS20BridgeTransactorSession struct {
	Contract     *ICS20BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ICS20BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ICS20BridgeRaw struct {
	Contract *ICS20Bridge // Generic contract binding to access the raw methods on
}

// ICS20BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ICS20BridgeCallerRaw struct {
	Contract *ICS20BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// ICS20BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ICS20BridgeTransactorRaw struct {
	Contract *ICS20BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewICS20Bridge creates a new instance of ICS20Bridge, bound to a specific deployed contract.
func NewICS20Bridge(address common.Address, backend bind.ContractBackend) (*ICS20Bridge, error) {
	contract, err := bindICS20Bridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ICS20Bridge{ICS20BridgeCaller: ICS20BridgeCaller{contract: contract}, ICS20BridgeTransactor: ICS20BridgeTransactor{contract: contract}, ICS20BridgeFilterer: ICS20BridgeFilterer{contract: contract}}, nil
}

// NewICS20BridgeCaller creates a new read-only instance of ICS20Bridge, bound to a specific deployed contract.
func NewICS20BridgeCaller(address common.Address, caller bind.ContractCaller) (*ICS20BridgeCaller, error) {
	contract, err := bindICS20Bridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeCaller{contract: contract}, nil
}

// NewICS20BridgeTransactor creates a new write-only instance of ICS20Bridge, bound to a specific deployed contract.
func NewICS20BridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*ICS20BridgeTransactor, error) {
	contract, err := bindICS20Bridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeTransactor{contract: contract}, nil
}

// NewICS20BridgeFilterer creates a new log filterer instance of ICS20Bridge, bound to a specific deployed contract.
func NewICS20BridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*ICS20BridgeFilterer, error) {
	contract, err := bindICS20Bridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeFilterer{contract: contract}, nil
}

// bindICS20Bridge binds a generic wrapper to an already deployed contract.
func bindICS20Bridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ICS20BridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICS20Bridge *ICS20BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICS20Bridge.Contract.ICS20BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICS20Bridge *ICS20BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.ICS20BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICS20Bridge *ICS20BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.ICS20BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ICS20Bridge *ICS20BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ICS20Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ICS20Bridge *ICS20BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ICS20Bridge *ICS20BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.contract.Transact(opts, method, params...)
}

// CREATEBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x5f217bcc.
//
// Solidity: function CREATE_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeCaller) CREATEBRIDGETOKENSREQUIREDGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "CREATE_BRIDGE_TOKENS_REQUIRED_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CREATEBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x5f217bcc.
//
// Solidity: function CREATE_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeSession) CREATEBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ICS20Bridge.Contract.CREATEBRIDGETOKENSREQUIREDGAS(&_ICS20Bridge.CallOpts)
}

// CREATEBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x5f217bcc.
//
// Solidity: function CREATE_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeCallerSession) CREATEBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ICS20Bridge.Contract.CREATEBRIDGETOKENSREQUIREDGAS(&_ICS20Bridge.CallOpts)
}

// IBCPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x7622e5ec.
//
// Solidity: function IBC_PRECOMPILE_ADDRESS() view returns(address)
func (_ICS20Bridge *ICS20BridgeCaller) IBCPRECOMPILEADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "IBC_PRECOMPILE_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// IBCPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x7622e5ec.
//
// Solidity: function IBC_PRECOMPILE_ADDRESS() view returns(address)
func (_ICS20Bridge *ICS20BridgeSession) IBCPRECOMPILEADDRESS() (common.Address, error) {
	return _ICS20Bridge.Contract.IBCPRECOMPILEADDRESS(&_ICS20Bridge.CallOpts)
}

// IBCPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x7622e5ec.
//
// Solidity: function IBC_PRECOMPILE_ADDRESS() view returns(address)
func (_ICS20Bridge *ICS20BridgeCallerSession) IBCPRECOMPILEADDRESS() (common.Address, error) {
	return _ICS20Bridge.Contract.IBCPRECOMPILEADDRESS(&_ICS20Bridge.CallOpts)
}

// MINTBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x7a465fd9.
//
// Solidity: function MINT_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeCaller) MINTBRIDGETOKENSREQUIREDGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "MINT_BRIDGE_TOKENS_REQUIRED_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x7a465fd9.
//
// Solidity: function MINT_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeSession) MINTBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ICS20Bridge.Contract.MINTBRIDGETOKENSREQUIREDGAS(&_ICS20Bridge.CallOpts)
}

// MINTBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x7a465fd9.
//
// Solidity: function MINT_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeCallerSession) MINTBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ICS20Bridge.Contract.MINTBRIDGETOKENSREQUIREDGAS(&_ICS20Bridge.CallOpts)
}

// TRANSFERBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x6b47cd9a.
//
// Solidity: function TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeCaller) TRANSFERBRIDGETOKENSREQUIREDGAS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TRANSFERBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x6b47cd9a.
//
// Solidity: function TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeSession) TRANSFERBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ICS20Bridge.Contract.TRANSFERBRIDGETOKENSREQUIREDGAS(&_ICS20Bridge.CallOpts)
}

// TRANSFERBRIDGETOKENSREQUIREDGAS is a free data retrieval call binding the contract method 0x6b47cd9a.
//
// Solidity: function TRANSFER_BRIDGE_TOKENS_REQUIRED_GAS() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeCallerSession) TRANSFERBRIDGETOKENSREQUIREDGAS() (*big.Int, error) {
	return _ICS20Bridge.Contract.TRANSFERBRIDGETOKENSREQUIREDGAS(&_ICS20Bridge.CallOpts)
}

// WARPPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x74971856.
//
// Solidity: function WARP_PRECOMPILE_ADDRESS() view returns(address)
func (_ICS20Bridge *ICS20BridgeCaller) WARPPRECOMPILEADDRESS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "WARP_PRECOMPILE_ADDRESS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WARPPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x74971856.
//
// Solidity: function WARP_PRECOMPILE_ADDRESS() view returns(address)
func (_ICS20Bridge *ICS20BridgeSession) WARPPRECOMPILEADDRESS() (common.Address, error) {
	return _ICS20Bridge.Contract.WARPPRECOMPILEADDRESS(&_ICS20Bridge.CallOpts)
}

// WARPPRECOMPILEADDRESS is a free data retrieval call binding the contract method 0x74971856.
//
// Solidity: function WARP_PRECOMPILE_ADDRESS() view returns(address)
func (_ICS20Bridge *ICS20BridgeCallerSession) WARPPRECOMPILEADDRESS() (common.Address, error) {
	return _ICS20Bridge.Contract.WARPPRECOMPILEADDRESS(&_ICS20Bridge.CallOpts)
}

// BridgedBalances is a free data retrieval call binding the contract method 0xb9e55da1.
//
// Solidity: function bridgedBalances(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(uint256 balance)
func (_ICS20Bridge *ICS20BridgeCaller) BridgedBalances(opts *bind.CallOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "bridgedBalances", destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BridgedBalances is a free data retrieval call binding the contract method 0xb9e55da1.
//
// Solidity: function bridgedBalances(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(uint256 balance)
func (_ICS20Bridge *ICS20BridgeSession) BridgedBalances(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (*big.Int, error) {
	return _ICS20Bridge.Contract.BridgedBalances(&_ICS20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)
}

// BridgedBalances is a free data retrieval call binding the contract method 0xb9e55da1.
//
// Solidity: function bridgedBalances(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(uint256 balance)
func (_ICS20Bridge *ICS20BridgeCallerSession) BridgedBalances(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (*big.Int, error) {
	return _ICS20Bridge.Contract.BridgedBalances(&_ICS20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)
}

// CurrentBlockchainID is a free data retrieval call binding the contract method 0x4950d2d0.
//
// Solidity: function currentBlockchainID() view returns(bytes32)
func (_ICS20Bridge *ICS20BridgeCaller) CurrentBlockchainID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "currentBlockchainID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentBlockchainID is a free data retrieval call binding the contract method 0x4950d2d0.
//
// Solidity: function currentBlockchainID() view returns(bytes32)
func (_ICS20Bridge *ICS20BridgeSession) CurrentBlockchainID() ([32]byte, error) {
	return _ICS20Bridge.Contract.CurrentBlockchainID(&_ICS20Bridge.CallOpts)
}

// CurrentBlockchainID is a free data retrieval call binding the contract method 0x4950d2d0.
//
// Solidity: function currentBlockchainID() view returns(bytes32)
func (_ICS20Bridge *ICS20BridgeCallerSession) CurrentBlockchainID() ([32]byte, error) {
	return _ICS20Bridge.Contract.CurrentBlockchainID(&_ICS20Bridge.CallOpts)
}

// EncodeCreateBridgeTokenData is a free data retrieval call binding the contract method 0x367e9584.
//
// Solidity: function encodeCreateBridgeTokenData(address nativeContractAddress, string nativeName, string nativeSymbol, uint8 nativeDecimals) pure returns(bytes)
func (_ICS20Bridge *ICS20BridgeCaller) EncodeCreateBridgeTokenData(opts *bind.CallOpts, nativeContractAddress common.Address, nativeName string, nativeSymbol string, nativeDecimals uint8) ([]byte, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "encodeCreateBridgeTokenData", nativeContractAddress, nativeName, nativeSymbol, nativeDecimals)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeCreateBridgeTokenData is a free data retrieval call binding the contract method 0x367e9584.
//
// Solidity: function encodeCreateBridgeTokenData(address nativeContractAddress, string nativeName, string nativeSymbol, uint8 nativeDecimals) pure returns(bytes)
func (_ICS20Bridge *ICS20BridgeSession) EncodeCreateBridgeTokenData(nativeContractAddress common.Address, nativeName string, nativeSymbol string, nativeDecimals uint8) ([]byte, error) {
	return _ICS20Bridge.Contract.EncodeCreateBridgeTokenData(&_ICS20Bridge.CallOpts, nativeContractAddress, nativeName, nativeSymbol, nativeDecimals)
}

// EncodeCreateBridgeTokenData is a free data retrieval call binding the contract method 0x367e9584.
//
// Solidity: function encodeCreateBridgeTokenData(address nativeContractAddress, string nativeName, string nativeSymbol, uint8 nativeDecimals) pure returns(bytes)
func (_ICS20Bridge *ICS20BridgeCallerSession) EncodeCreateBridgeTokenData(nativeContractAddress common.Address, nativeName string, nativeSymbol string, nativeDecimals uint8) ([]byte, error) {
	return _ICS20Bridge.Contract.EncodeCreateBridgeTokenData(&_ICS20Bridge.CallOpts, nativeContractAddress, nativeName, nativeSymbol, nativeDecimals)
}

// EncodeMintBridgeTokensData is a free data retrieval call binding the contract method 0xe3642f1a.
//
// Solidity: function encodeMintBridgeTokensData(address nativeContractAddress, address recipient, string cosmosRecipient, uint256 bridgeAmount) pure returns(bytes)
func (_ICS20Bridge *ICS20BridgeCaller) EncodeMintBridgeTokensData(opts *bind.CallOpts, nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, bridgeAmount *big.Int) ([]byte, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "encodeMintBridgeTokensData", nativeContractAddress, recipient, cosmosRecipient, bridgeAmount)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeMintBridgeTokensData is a free data retrieval call binding the contract method 0xe3642f1a.
//
// Solidity: function encodeMintBridgeTokensData(address nativeContractAddress, address recipient, string cosmosRecipient, uint256 bridgeAmount) pure returns(bytes)
func (_ICS20Bridge *ICS20BridgeSession) EncodeMintBridgeTokensData(nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, bridgeAmount *big.Int) ([]byte, error) {
	return _ICS20Bridge.Contract.EncodeMintBridgeTokensData(&_ICS20Bridge.CallOpts, nativeContractAddress, recipient, cosmosRecipient, bridgeAmount)
}

// EncodeMintBridgeTokensData is a free data retrieval call binding the contract method 0xe3642f1a.
//
// Solidity: function encodeMintBridgeTokensData(address nativeContractAddress, address recipient, string cosmosRecipient, uint256 bridgeAmount) pure returns(bytes)
func (_ICS20Bridge *ICS20BridgeCallerSession) EncodeMintBridgeTokensData(nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, bridgeAmount *big.Int) ([]byte, error) {
	return _ICS20Bridge.Contract.EncodeMintBridgeTokensData(&_ICS20Bridge.CallOpts, nativeContractAddress, recipient, cosmosRecipient, bridgeAmount)
}

// EncodeTransferBridgeTokensData is a free data retrieval call binding the contract method 0x8ae279a4.
//
// Solidity: function encodeTransferBridgeTokensData(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContractAddress, address recipient, string cosmosRecipient, uint256 amount, uint256 feeAmount) pure returns(bytes)
func (_ICS20Bridge *ICS20BridgeCaller) EncodeTransferBridgeTokensData(opts *bind.CallOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, amount *big.Int, feeAmount *big.Int) ([]byte, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "encodeTransferBridgeTokensData", destinationBlockchainID, destinationBridgeAddress, nativeContractAddress, recipient, cosmosRecipient, amount, feeAmount)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeTransferBridgeTokensData is a free data retrieval call binding the contract method 0x8ae279a4.
//
// Solidity: function encodeTransferBridgeTokensData(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContractAddress, address recipient, string cosmosRecipient, uint256 amount, uint256 feeAmount) pure returns(bytes)
func (_ICS20Bridge *ICS20BridgeSession) EncodeTransferBridgeTokensData(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, amount *big.Int, feeAmount *big.Int) ([]byte, error) {
	return _ICS20Bridge.Contract.EncodeTransferBridgeTokensData(&_ICS20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeContractAddress, recipient, cosmosRecipient, amount, feeAmount)
}

// EncodeTransferBridgeTokensData is a free data retrieval call binding the contract method 0x8ae279a4.
//
// Solidity: function encodeTransferBridgeTokensData(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeContractAddress, address recipient, string cosmosRecipient, uint256 amount, uint256 feeAmount) pure returns(bytes)
func (_ICS20Bridge *ICS20BridgeCallerSession) EncodeTransferBridgeTokensData(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeContractAddress common.Address, recipient common.Address, cosmosRecipient string, amount *big.Int, feeAmount *big.Int) ([]byte, error) {
	return _ICS20Bridge.Contract.EncodeTransferBridgeTokensData(&_ICS20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeContractAddress, recipient, cosmosRecipient, amount, feeAmount)
}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeCaller) GetMinTeleporterVersion(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "getMinTeleporterVersion")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeSession) GetMinTeleporterVersion() (*big.Int, error) {
	return _ICS20Bridge.Contract.GetMinTeleporterVersion(&_ICS20Bridge.CallOpts)
}

// GetMinTeleporterVersion is a free data retrieval call binding the contract method 0xd2cc7a70.
//
// Solidity: function getMinTeleporterVersion() view returns(uint256)
func (_ICS20Bridge *ICS20BridgeCallerSession) GetMinTeleporterVersion() (*big.Int, error) {
	return _ICS20Bridge.Contract.GetMinTeleporterVersion(&_ICS20Bridge.CallOpts)
}

// IbcChannel is a free data retrieval call binding the contract method 0x5f56f04d.
//
// Solidity: function ibcChannel() view returns(string)
func (_ICS20Bridge *ICS20BridgeCaller) IbcChannel(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "ibcChannel")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// IbcChannel is a free data retrieval call binding the contract method 0x5f56f04d.
//
// Solidity: function ibcChannel() view returns(string)
func (_ICS20Bridge *ICS20BridgeSession) IbcChannel() (string, error) {
	return _ICS20Bridge.Contract.IbcChannel(&_ICS20Bridge.CallOpts)
}

// IbcChannel is a free data retrieval call binding the contract method 0x5f56f04d.
//
// Solidity: function ibcChannel() view returns(string)
func (_ICS20Bridge *ICS20BridgeCallerSession) IbcChannel() (string, error) {
	return _ICS20Bridge.Contract.IbcChannel(&_ICS20Bridge.CallOpts)
}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ICS20Bridge *ICS20BridgeCaller) IsTeleporterAddressPaused(opts *bind.CallOpts, teleporterAddress common.Address) (bool, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "isTeleporterAddressPaused", teleporterAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ICS20Bridge *ICS20BridgeSession) IsTeleporterAddressPaused(teleporterAddress common.Address) (bool, error) {
	return _ICS20Bridge.Contract.IsTeleporterAddressPaused(&_ICS20Bridge.CallOpts, teleporterAddress)
}

// IsTeleporterAddressPaused is a free data retrieval call binding the contract method 0x97314297.
//
// Solidity: function isTeleporterAddressPaused(address teleporterAddress) view returns(bool)
func (_ICS20Bridge *ICS20BridgeCallerSession) IsTeleporterAddressPaused(teleporterAddress common.Address) (bool, error) {
	return _ICS20Bridge.Contract.IsTeleporterAddressPaused(&_ICS20Bridge.CallOpts, teleporterAddress)
}

// NativeToWrappedTokens is a free data retrieval call binding the contract method 0x65435568.
//
// Solidity: function nativeToWrappedTokens(bytes32 nativeBlockchainID, address nativeBridgeAddress, address nativeTokenAddress) view returns(address bridgeTokenAddress)
func (_ICS20Bridge *ICS20BridgeCaller) NativeToWrappedTokens(opts *bind.CallOpts, nativeBlockchainID [32]byte, nativeBridgeAddress common.Address, nativeTokenAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "nativeToWrappedTokens", nativeBlockchainID, nativeBridgeAddress, nativeTokenAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NativeToWrappedTokens is a free data retrieval call binding the contract method 0x65435568.
//
// Solidity: function nativeToWrappedTokens(bytes32 nativeBlockchainID, address nativeBridgeAddress, address nativeTokenAddress) view returns(address bridgeTokenAddress)
func (_ICS20Bridge *ICS20BridgeSession) NativeToWrappedTokens(nativeBlockchainID [32]byte, nativeBridgeAddress common.Address, nativeTokenAddress common.Address) (common.Address, error) {
	return _ICS20Bridge.Contract.NativeToWrappedTokens(&_ICS20Bridge.CallOpts, nativeBlockchainID, nativeBridgeAddress, nativeTokenAddress)
}

// NativeToWrappedTokens is a free data retrieval call binding the contract method 0x65435568.
//
// Solidity: function nativeToWrappedTokens(bytes32 nativeBlockchainID, address nativeBridgeAddress, address nativeTokenAddress) view returns(address bridgeTokenAddress)
func (_ICS20Bridge *ICS20BridgeCallerSession) NativeToWrappedTokens(nativeBlockchainID [32]byte, nativeBridgeAddress common.Address, nativeTokenAddress common.Address) (common.Address, error) {
	return _ICS20Bridge.Contract.NativeToWrappedTokens(&_ICS20Bridge.CallOpts, nativeBlockchainID, nativeBridgeAddress, nativeTokenAddress)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ICS20Bridge *ICS20BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ICS20Bridge *ICS20BridgeSession) Owner() (common.Address, error) {
	return _ICS20Bridge.Contract.Owner(&_ICS20Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ICS20Bridge *ICS20BridgeCallerSession) Owner() (common.Address, error) {
	return _ICS20Bridge.Contract.Owner(&_ICS20Bridge.CallOpts)
}

// SubmittedBridgeTokenCreations is a free data retrieval call binding the contract method 0x8343f661.
//
// Solidity: function submittedBridgeTokenCreations(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(bool tokenCreationSubmitted)
func (_ICS20Bridge *ICS20BridgeCaller) SubmittedBridgeTokenCreations(opts *bind.CallOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (bool, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "submittedBridgeTokenCreations", destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SubmittedBridgeTokenCreations is a free data retrieval call binding the contract method 0x8343f661.
//
// Solidity: function submittedBridgeTokenCreations(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(bool tokenCreationSubmitted)
func (_ICS20Bridge *ICS20BridgeSession) SubmittedBridgeTokenCreations(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (bool, error) {
	return _ICS20Bridge.Contract.SubmittedBridgeTokenCreations(&_ICS20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)
}

// SubmittedBridgeTokenCreations is a free data retrieval call binding the contract method 0x8343f661.
//
// Solidity: function submittedBridgeTokenCreations(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeTokenContract) view returns(bool tokenCreationSubmitted)
func (_ICS20Bridge *ICS20BridgeCallerSession) SubmittedBridgeTokenCreations(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeTokenContract common.Address) (bool, error) {
	return _ICS20Bridge.Contract.SubmittedBridgeTokenCreations(&_ICS20Bridge.CallOpts, destinationBlockchainID, destinationBridgeAddress, nativeTokenContract)
}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ICS20Bridge *ICS20BridgeCaller) TeleporterRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "teleporterRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ICS20Bridge *ICS20BridgeSession) TeleporterRegistry() (common.Address, error) {
	return _ICS20Bridge.Contract.TeleporterRegistry(&_ICS20Bridge.CallOpts)
}

// TeleporterRegistry is a free data retrieval call binding the contract method 0x1a7f5bec.
//
// Solidity: function teleporterRegistry() view returns(address)
func (_ICS20Bridge *ICS20BridgeCallerSession) TeleporterRegistry() (common.Address, error) {
	return _ICS20Bridge.Contract.TeleporterRegistry(&_ICS20Bridge.CallOpts)
}

// WrappedTokenContracts is a free data retrieval call binding the contract method 0x9bd9abc0.
//
// Solidity: function wrappedTokenContracts(address bridgeToken) view returns(bool bridgeTokenExists)
func (_ICS20Bridge *ICS20BridgeCaller) WrappedTokenContracts(opts *bind.CallOpts, bridgeToken common.Address) (bool, error) {
	var out []interface{}
	err := _ICS20Bridge.contract.Call(opts, &out, "wrappedTokenContracts", bridgeToken)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WrappedTokenContracts is a free data retrieval call binding the contract method 0x9bd9abc0.
//
// Solidity: function wrappedTokenContracts(address bridgeToken) view returns(bool bridgeTokenExists)
func (_ICS20Bridge *ICS20BridgeSession) WrappedTokenContracts(bridgeToken common.Address) (bool, error) {
	return _ICS20Bridge.Contract.WrappedTokenContracts(&_ICS20Bridge.CallOpts, bridgeToken)
}

// WrappedTokenContracts is a free data retrieval call binding the contract method 0x9bd9abc0.
//
// Solidity: function wrappedTokenContracts(address bridgeToken) view returns(bool bridgeTokenExists)
func (_ICS20Bridge *ICS20BridgeCallerSession) WrappedTokenContracts(bridgeToken common.Address) (bool, error) {
	return _ICS20Bridge.Contract.WrappedTokenContracts(&_ICS20Bridge.CallOpts, bridgeToken)
}

// BridgeTokens is a paid mutator transaction binding the contract method 0xc63d2207.
//
// Solidity: function bridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ICS20Bridge *ICS20BridgeTransactor) BridgeTokens(opts *bind.TransactOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.contract.Transact(opts, "bridgeTokens", destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// BridgeTokens is a paid mutator transaction binding the contract method 0xc63d2207.
//
// Solidity: function bridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ICS20Bridge *ICS20BridgeSession) BridgeTokens(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.BridgeTokens(&_ICS20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// BridgeTokens is a paid mutator transaction binding the contract method 0xc63d2207.
//
// Solidity: function bridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ICS20Bridge *ICS20BridgeTransactorSession) BridgeTokens(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.BridgeTokens(&_ICS20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// IbcBridgeTokens is a paid mutator transaction binding the contract method 0x66a0680d.
//
// Solidity: function ibcBridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, string cosmosRecipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ICS20Bridge *ICS20BridgeTransactor) IbcBridgeTokens(opts *bind.TransactOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, cosmosRecipient string, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.contract.Transact(opts, "ibcBridgeTokens", destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, cosmosRecipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// IbcBridgeTokens is a paid mutator transaction binding the contract method 0x66a0680d.
//
// Solidity: function ibcBridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, string cosmosRecipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ICS20Bridge *ICS20BridgeSession) IbcBridgeTokens(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, cosmosRecipient string, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.IbcBridgeTokens(&_ICS20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, cosmosRecipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// IbcBridgeTokens is a paid mutator transaction binding the contract method 0x66a0680d.
//
// Solidity: function ibcBridgeTokens(bytes32 destinationBlockchainID, address destinationBridgeAddress, address tokenContractAddress, address recipient, string cosmosRecipient, uint256 totalAmount, uint256 primaryFeeAmount, uint256 secondaryFeeAmount) returns()
func (_ICS20Bridge *ICS20BridgeTransactorSession) IbcBridgeTokens(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, tokenContractAddress common.Address, recipient common.Address, cosmosRecipient string, totalAmount *big.Int, primaryFeeAmount *big.Int, secondaryFeeAmount *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.IbcBridgeTokens(&_ICS20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, tokenContractAddress, recipient, cosmosRecipient, totalAmount, primaryFeeAmount, secondaryFeeAmount)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ICS20Bridge *ICS20BridgeTransactor) PauseTeleporterAddress(opts *bind.TransactOpts, teleporterAddress common.Address) (*types.Transaction, error) {
	return _ICS20Bridge.contract.Transact(opts, "pauseTeleporterAddress", teleporterAddress)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ICS20Bridge *ICS20BridgeSession) PauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.PauseTeleporterAddress(&_ICS20Bridge.TransactOpts, teleporterAddress)
}

// PauseTeleporterAddress is a paid mutator transaction binding the contract method 0x2b0d8f18.
//
// Solidity: function pauseTeleporterAddress(address teleporterAddress) returns()
func (_ICS20Bridge *ICS20BridgeTransactorSession) PauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.PauseTeleporterAddress(&_ICS20Bridge.TransactOpts, teleporterAddress)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 originBlockchainID, address originSenderAddress, bytes message) returns()
func (_ICS20Bridge *ICS20BridgeTransactor) ReceiveTeleporterMessage(opts *bind.TransactOpts, originBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ICS20Bridge.contract.Transact(opts, "receiveTeleporterMessage", originBlockchainID, originSenderAddress, message)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 originBlockchainID, address originSenderAddress, bytes message) returns()
func (_ICS20Bridge *ICS20BridgeSession) ReceiveTeleporterMessage(originBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.ReceiveTeleporterMessage(&_ICS20Bridge.TransactOpts, originBlockchainID, originSenderAddress, message)
}

// ReceiveTeleporterMessage is a paid mutator transaction binding the contract method 0xc868efaa.
//
// Solidity: function receiveTeleporterMessage(bytes32 originBlockchainID, address originSenderAddress, bytes message) returns()
func (_ICS20Bridge *ICS20BridgeTransactorSession) ReceiveTeleporterMessage(originBlockchainID [32]byte, originSenderAddress common.Address, message []byte) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.ReceiveTeleporterMessage(&_ICS20Bridge.TransactOpts, originBlockchainID, originSenderAddress, message)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ICS20Bridge *ICS20BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ICS20Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ICS20Bridge *ICS20BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _ICS20Bridge.Contract.RenounceOwnership(&_ICS20Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ICS20Bridge *ICS20BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ICS20Bridge.Contract.RenounceOwnership(&_ICS20Bridge.TransactOpts)
}

// SubmitCreateBridgeToken is a paid mutator transaction binding the contract method 0x6c7e40d1.
//
// Solidity: function submitCreateBridgeToken(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeToken, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ICS20Bridge *ICS20BridgeTransactor) SubmitCreateBridgeToken(opts *bind.TransactOpts, destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeToken common.Address, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.contract.Transact(opts, "submitCreateBridgeToken", destinationBlockchainID, destinationBridgeAddress, nativeToken, messageFeeAsset, messageFeeAmount)
}

// SubmitCreateBridgeToken is a paid mutator transaction binding the contract method 0x6c7e40d1.
//
// Solidity: function submitCreateBridgeToken(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeToken, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ICS20Bridge *ICS20BridgeSession) SubmitCreateBridgeToken(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeToken common.Address, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.SubmitCreateBridgeToken(&_ICS20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, nativeToken, messageFeeAsset, messageFeeAmount)
}

// SubmitCreateBridgeToken is a paid mutator transaction binding the contract method 0x6c7e40d1.
//
// Solidity: function submitCreateBridgeToken(bytes32 destinationBlockchainID, address destinationBridgeAddress, address nativeToken, address messageFeeAsset, uint256 messageFeeAmount) returns()
func (_ICS20Bridge *ICS20BridgeTransactorSession) SubmitCreateBridgeToken(destinationBlockchainID [32]byte, destinationBridgeAddress common.Address, nativeToken common.Address, messageFeeAsset common.Address, messageFeeAmount *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.SubmitCreateBridgeToken(&_ICS20Bridge.TransactOpts, destinationBlockchainID, destinationBridgeAddress, nativeToken, messageFeeAsset, messageFeeAmount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ICS20Bridge *ICS20BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ICS20Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ICS20Bridge *ICS20BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.TransferOwnership(&_ICS20Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ICS20Bridge *ICS20BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.TransferOwnership(&_ICS20Bridge.TransactOpts, newOwner)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ICS20Bridge *ICS20BridgeTransactor) UnpauseTeleporterAddress(opts *bind.TransactOpts, teleporterAddress common.Address) (*types.Transaction, error) {
	return _ICS20Bridge.contract.Transact(opts, "unpauseTeleporterAddress", teleporterAddress)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ICS20Bridge *ICS20BridgeSession) UnpauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.UnpauseTeleporterAddress(&_ICS20Bridge.TransactOpts, teleporterAddress)
}

// UnpauseTeleporterAddress is a paid mutator transaction binding the contract method 0x4511243e.
//
// Solidity: function unpauseTeleporterAddress(address teleporterAddress) returns()
func (_ICS20Bridge *ICS20BridgeTransactorSession) UnpauseTeleporterAddress(teleporterAddress common.Address) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.UnpauseTeleporterAddress(&_ICS20Bridge.TransactOpts, teleporterAddress)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ICS20Bridge *ICS20BridgeTransactor) UpdateMinTeleporterVersion(opts *bind.TransactOpts, version *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.contract.Transact(opts, "updateMinTeleporterVersion", version)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ICS20Bridge *ICS20BridgeSession) UpdateMinTeleporterVersion(version *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.UpdateMinTeleporterVersion(&_ICS20Bridge.TransactOpts, version)
}

// UpdateMinTeleporterVersion is a paid mutator transaction binding the contract method 0x5eb99514.
//
// Solidity: function updateMinTeleporterVersion(uint256 version) returns()
func (_ICS20Bridge *ICS20BridgeTransactorSession) UpdateMinTeleporterVersion(version *big.Int) (*types.Transaction, error) {
	return _ICS20Bridge.Contract.UpdateMinTeleporterVersion(&_ICS20Bridge.TransactOpts, version)
}

// ICS20BridgeBridgeTokensIterator is returned from FilterBridgeTokens and is used to iterate over the raw logs and unpacked data for BridgeTokens events raised by the ICS20Bridge contract.
type ICS20BridgeBridgeTokensIterator struct {
	Event *ICS20BridgeBridgeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICS20BridgeBridgeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICS20BridgeBridgeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICS20BridgeBridgeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICS20BridgeBridgeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICS20BridgeBridgeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICS20BridgeBridgeTokens represents a BridgeTokens event raised by the ICS20Bridge contract.
type ICS20BridgeBridgeTokens struct {
	TokenContractAddress     common.Address
	DestinationBlockchainID  [32]byte
	TeleporterMessageID      *big.Int
	DestinationBridgeAddress common.Address
	Recipient                common.Address
	Amount                   *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterBridgeTokens is a free log retrieval operation binding the contract event 0x97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c31.
//
// Solidity: event BridgeTokens(address indexed tokenContractAddress, bytes32 indexed destinationBlockchainID, uint256 indexed teleporterMessageID, address destinationBridgeAddress, address recipient, uint256 amount)
func (_ICS20Bridge *ICS20BridgeFilterer) FilterBridgeTokens(opts *bind.FilterOpts, tokenContractAddress []common.Address, destinationBlockchainID [][32]byte, teleporterMessageID []*big.Int) (*ICS20BridgeBridgeTokensIterator, error) {

	var tokenContractAddressRule []interface{}
	for _, tokenContractAddressItem := range tokenContractAddress {
		tokenContractAddressRule = append(tokenContractAddressRule, tokenContractAddressItem)
	}
	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ICS20Bridge.contract.FilterLogs(opts, "BridgeTokens", tokenContractAddressRule, destinationBlockchainIDRule, teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeBridgeTokensIterator{contract: _ICS20Bridge.contract, event: "BridgeTokens", logs: logs, sub: sub}, nil
}

// WatchBridgeTokens is a free log subscription operation binding the contract event 0x97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c31.
//
// Solidity: event BridgeTokens(address indexed tokenContractAddress, bytes32 indexed destinationBlockchainID, uint256 indexed teleporterMessageID, address destinationBridgeAddress, address recipient, uint256 amount)
func (_ICS20Bridge *ICS20BridgeFilterer) WatchBridgeTokens(opts *bind.WatchOpts, sink chan<- *ICS20BridgeBridgeTokens, tokenContractAddress []common.Address, destinationBlockchainID [][32]byte, teleporterMessageID []*big.Int) (event.Subscription, error) {

	var tokenContractAddressRule []interface{}
	for _, tokenContractAddressItem := range tokenContractAddress {
		tokenContractAddressRule = append(tokenContractAddressRule, tokenContractAddressItem)
	}
	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var teleporterMessageIDRule []interface{}
	for _, teleporterMessageIDItem := range teleporterMessageID {
		teleporterMessageIDRule = append(teleporterMessageIDRule, teleporterMessageIDItem)
	}

	logs, sub, err := _ICS20Bridge.contract.WatchLogs(opts, "BridgeTokens", tokenContractAddressRule, destinationBlockchainIDRule, teleporterMessageIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICS20BridgeBridgeTokens)
				if err := _ICS20Bridge.contract.UnpackLog(event, "BridgeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeTokens is a log parse operation binding the contract event 0x97935c4470efae40c8440c3abfe968a5512232dd375cc974e712f487c2b99c31.
//
// Solidity: event BridgeTokens(address indexed tokenContractAddress, bytes32 indexed destinationBlockchainID, uint256 indexed teleporterMessageID, address destinationBridgeAddress, address recipient, uint256 amount)
func (_ICS20Bridge *ICS20BridgeFilterer) ParseBridgeTokens(log types.Log) (*ICS20BridgeBridgeTokens, error) {
	event := new(ICS20BridgeBridgeTokens)
	if err := _ICS20Bridge.contract.UnpackLog(event, "BridgeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICS20BridgeCreateBridgeTokenIterator is returned from FilterCreateBridgeToken and is used to iterate over the raw logs and unpacked data for CreateBridgeToken events raised by the ICS20Bridge contract.
type ICS20BridgeCreateBridgeTokenIterator struct {
	Event *ICS20BridgeCreateBridgeToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICS20BridgeCreateBridgeTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICS20BridgeCreateBridgeToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICS20BridgeCreateBridgeToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICS20BridgeCreateBridgeTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICS20BridgeCreateBridgeTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICS20BridgeCreateBridgeToken represents a CreateBridgeToken event raised by the ICS20Bridge contract.
type ICS20BridgeCreateBridgeToken struct {
	NativeBlockchainID    [32]byte
	NativeBridgeAddress   common.Address
	NativeContractAddress common.Address
	BridgeTokenAddress    common.Address
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterCreateBridgeToken is a free log retrieval operation binding the contract event 0xe1c61a845f79534e11924517ddbedc668d0c20e467eafb4d3bd2858e2815f3b5.
//
// Solidity: event CreateBridgeToken(bytes32 indexed nativeBlockchainID, address indexed nativeBridgeAddress, address indexed nativeContractAddress, address bridgeTokenAddress)
func (_ICS20Bridge *ICS20BridgeFilterer) FilterCreateBridgeToken(opts *bind.FilterOpts, nativeBlockchainID [][32]byte, nativeBridgeAddress []common.Address, nativeContractAddress []common.Address) (*ICS20BridgeCreateBridgeTokenIterator, error) {

	var nativeBlockchainIDRule []interface{}
	for _, nativeBlockchainIDItem := range nativeBlockchainID {
		nativeBlockchainIDRule = append(nativeBlockchainIDRule, nativeBlockchainIDItem)
	}
	var nativeBridgeAddressRule []interface{}
	for _, nativeBridgeAddressItem := range nativeBridgeAddress {
		nativeBridgeAddressRule = append(nativeBridgeAddressRule, nativeBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.FilterLogs(opts, "CreateBridgeToken", nativeBlockchainIDRule, nativeBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeCreateBridgeTokenIterator{contract: _ICS20Bridge.contract, event: "CreateBridgeToken", logs: logs, sub: sub}, nil
}

// WatchCreateBridgeToken is a free log subscription operation binding the contract event 0xe1c61a845f79534e11924517ddbedc668d0c20e467eafb4d3bd2858e2815f3b5.
//
// Solidity: event CreateBridgeToken(bytes32 indexed nativeBlockchainID, address indexed nativeBridgeAddress, address indexed nativeContractAddress, address bridgeTokenAddress)
func (_ICS20Bridge *ICS20BridgeFilterer) WatchCreateBridgeToken(opts *bind.WatchOpts, sink chan<- *ICS20BridgeCreateBridgeToken, nativeBlockchainID [][32]byte, nativeBridgeAddress []common.Address, nativeContractAddress []common.Address) (event.Subscription, error) {

	var nativeBlockchainIDRule []interface{}
	for _, nativeBlockchainIDItem := range nativeBlockchainID {
		nativeBlockchainIDRule = append(nativeBlockchainIDRule, nativeBlockchainIDItem)
	}
	var nativeBridgeAddressRule []interface{}
	for _, nativeBridgeAddressItem := range nativeBridgeAddress {
		nativeBridgeAddressRule = append(nativeBridgeAddressRule, nativeBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.WatchLogs(opts, "CreateBridgeToken", nativeBlockchainIDRule, nativeBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICS20BridgeCreateBridgeToken)
				if err := _ICS20Bridge.contract.UnpackLog(event, "CreateBridgeToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateBridgeToken is a log parse operation binding the contract event 0xe1c61a845f79534e11924517ddbedc668d0c20e467eafb4d3bd2858e2815f3b5.
//
// Solidity: event CreateBridgeToken(bytes32 indexed nativeBlockchainID, address indexed nativeBridgeAddress, address indexed nativeContractAddress, address bridgeTokenAddress)
func (_ICS20Bridge *ICS20BridgeFilterer) ParseCreateBridgeToken(log types.Log) (*ICS20BridgeCreateBridgeToken, error) {
	event := new(ICS20BridgeCreateBridgeToken)
	if err := _ICS20Bridge.contract.UnpackLog(event, "CreateBridgeToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICS20BridgeMinTeleporterVersionUpdatedIterator is returned from FilterMinTeleporterVersionUpdated and is used to iterate over the raw logs and unpacked data for MinTeleporterVersionUpdated events raised by the ICS20Bridge contract.
type ICS20BridgeMinTeleporterVersionUpdatedIterator struct {
	Event *ICS20BridgeMinTeleporterVersionUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICS20BridgeMinTeleporterVersionUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICS20BridgeMinTeleporterVersionUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICS20BridgeMinTeleporterVersionUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICS20BridgeMinTeleporterVersionUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICS20BridgeMinTeleporterVersionUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICS20BridgeMinTeleporterVersionUpdated represents a MinTeleporterVersionUpdated event raised by the ICS20Bridge contract.
type ICS20BridgeMinTeleporterVersionUpdated struct {
	OldMinTeleporterVersion *big.Int
	NewMinTeleporterVersion *big.Int
	Raw                     types.Log // Blockchain specific contextual infos
}

// FilterMinTeleporterVersionUpdated is a free log retrieval operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ICS20Bridge *ICS20BridgeFilterer) FilterMinTeleporterVersionUpdated(opts *bind.FilterOpts, oldMinTeleporterVersion []*big.Int, newMinTeleporterVersion []*big.Int) (*ICS20BridgeMinTeleporterVersionUpdatedIterator, error) {

	var oldMinTeleporterVersionRule []interface{}
	for _, oldMinTeleporterVersionItem := range oldMinTeleporterVersion {
		oldMinTeleporterVersionRule = append(oldMinTeleporterVersionRule, oldMinTeleporterVersionItem)
	}
	var newMinTeleporterVersionRule []interface{}
	for _, newMinTeleporterVersionItem := range newMinTeleporterVersion {
		newMinTeleporterVersionRule = append(newMinTeleporterVersionRule, newMinTeleporterVersionItem)
	}

	logs, sub, err := _ICS20Bridge.contract.FilterLogs(opts, "MinTeleporterVersionUpdated", oldMinTeleporterVersionRule, newMinTeleporterVersionRule)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeMinTeleporterVersionUpdatedIterator{contract: _ICS20Bridge.contract, event: "MinTeleporterVersionUpdated", logs: logs, sub: sub}, nil
}

// WatchMinTeleporterVersionUpdated is a free log subscription operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ICS20Bridge *ICS20BridgeFilterer) WatchMinTeleporterVersionUpdated(opts *bind.WatchOpts, sink chan<- *ICS20BridgeMinTeleporterVersionUpdated, oldMinTeleporterVersion []*big.Int, newMinTeleporterVersion []*big.Int) (event.Subscription, error) {

	var oldMinTeleporterVersionRule []interface{}
	for _, oldMinTeleporterVersionItem := range oldMinTeleporterVersion {
		oldMinTeleporterVersionRule = append(oldMinTeleporterVersionRule, oldMinTeleporterVersionItem)
	}
	var newMinTeleporterVersionRule []interface{}
	for _, newMinTeleporterVersionItem := range newMinTeleporterVersion {
		newMinTeleporterVersionRule = append(newMinTeleporterVersionRule, newMinTeleporterVersionItem)
	}

	logs, sub, err := _ICS20Bridge.contract.WatchLogs(opts, "MinTeleporterVersionUpdated", oldMinTeleporterVersionRule, newMinTeleporterVersionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICS20BridgeMinTeleporterVersionUpdated)
				if err := _ICS20Bridge.contract.UnpackLog(event, "MinTeleporterVersionUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinTeleporterVersionUpdated is a log parse operation binding the contract event 0xa9a7ef57e41f05b4c15480842f5f0c27edfcbb553fed281f7c4068452cc1c02d.
//
// Solidity: event MinTeleporterVersionUpdated(uint256 indexed oldMinTeleporterVersion, uint256 indexed newMinTeleporterVersion)
func (_ICS20Bridge *ICS20BridgeFilterer) ParseMinTeleporterVersionUpdated(log types.Log) (*ICS20BridgeMinTeleporterVersionUpdated, error) {
	event := new(ICS20BridgeMinTeleporterVersionUpdated)
	if err := _ICS20Bridge.contract.UnpackLog(event, "MinTeleporterVersionUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICS20BridgeMintBridgeTokensIterator is returned from FilterMintBridgeTokens and is used to iterate over the raw logs and unpacked data for MintBridgeTokens events raised by the ICS20Bridge contract.
type ICS20BridgeMintBridgeTokensIterator struct {
	Event *ICS20BridgeMintBridgeTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICS20BridgeMintBridgeTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICS20BridgeMintBridgeTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICS20BridgeMintBridgeTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICS20BridgeMintBridgeTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICS20BridgeMintBridgeTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICS20BridgeMintBridgeTokens represents a MintBridgeTokens event raised by the ICS20Bridge contract.
type ICS20BridgeMintBridgeTokens struct {
	ContractAddress common.Address
	Recipient       common.Address
	Amount          *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterMintBridgeTokens is a free log retrieval operation binding the contract event 0xc0767f158f0d5394b598489a51ed607cd55a8be2dcef113ba1626efcf4c63954.
//
// Solidity: event MintBridgeTokens(address indexed contractAddress, address recipient, uint256 amount)
func (_ICS20Bridge *ICS20BridgeFilterer) FilterMintBridgeTokens(opts *bind.FilterOpts, contractAddress []common.Address) (*ICS20BridgeMintBridgeTokensIterator, error) {

	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.FilterLogs(opts, "MintBridgeTokens", contractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeMintBridgeTokensIterator{contract: _ICS20Bridge.contract, event: "MintBridgeTokens", logs: logs, sub: sub}, nil
}

// WatchMintBridgeTokens is a free log subscription operation binding the contract event 0xc0767f158f0d5394b598489a51ed607cd55a8be2dcef113ba1626efcf4c63954.
//
// Solidity: event MintBridgeTokens(address indexed contractAddress, address recipient, uint256 amount)
func (_ICS20Bridge *ICS20BridgeFilterer) WatchMintBridgeTokens(opts *bind.WatchOpts, sink chan<- *ICS20BridgeMintBridgeTokens, contractAddress []common.Address) (event.Subscription, error) {

	var contractAddressRule []interface{}
	for _, contractAddressItem := range contractAddress {
		contractAddressRule = append(contractAddressRule, contractAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.WatchLogs(opts, "MintBridgeTokens", contractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICS20BridgeMintBridgeTokens)
				if err := _ICS20Bridge.contract.UnpackLog(event, "MintBridgeTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintBridgeTokens is a log parse operation binding the contract event 0xc0767f158f0d5394b598489a51ed607cd55a8be2dcef113ba1626efcf4c63954.
//
// Solidity: event MintBridgeTokens(address indexed contractAddress, address recipient, uint256 amount)
func (_ICS20Bridge *ICS20BridgeFilterer) ParseMintBridgeTokens(log types.Log) (*ICS20BridgeMintBridgeTokens, error) {
	event := new(ICS20BridgeMintBridgeTokens)
	if err := _ICS20Bridge.contract.UnpackLog(event, "MintBridgeTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICS20BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ICS20Bridge contract.
type ICS20BridgeOwnershipTransferredIterator struct {
	Event *ICS20BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICS20BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICS20BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICS20BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICS20BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICS20BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICS20BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the ICS20Bridge contract.
type ICS20BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ICS20Bridge *ICS20BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ICS20BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ICS20Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeOwnershipTransferredIterator{contract: _ICS20Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ICS20Bridge *ICS20BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ICS20BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ICS20Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICS20BridgeOwnershipTransferred)
				if err := _ICS20Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ICS20Bridge *ICS20BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*ICS20BridgeOwnershipTransferred, error) {
	event := new(ICS20BridgeOwnershipTransferred)
	if err := _ICS20Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICS20BridgeSubmitCreateBridgeTokenIterator is returned from FilterSubmitCreateBridgeToken and is used to iterate over the raw logs and unpacked data for SubmitCreateBridgeToken events raised by the ICS20Bridge contract.
type ICS20BridgeSubmitCreateBridgeTokenIterator struct {
	Event *ICS20BridgeSubmitCreateBridgeToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICS20BridgeSubmitCreateBridgeTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICS20BridgeSubmitCreateBridgeToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICS20BridgeSubmitCreateBridgeToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICS20BridgeSubmitCreateBridgeTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICS20BridgeSubmitCreateBridgeTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICS20BridgeSubmitCreateBridgeToken represents a SubmitCreateBridgeToken event raised by the ICS20Bridge contract.
type ICS20BridgeSubmitCreateBridgeToken struct {
	DestinationBlockchainID  [32]byte
	DestinationBridgeAddress common.Address
	NativeContractAddress    common.Address
	TeleporterMessageID      *big.Int
	Raw                      types.Log // Blockchain specific contextual infos
}

// FilterSubmitCreateBridgeToken is a free log retrieval operation binding the contract event 0x110b902745a3d7d6b66732479f01de654a3bc6e501be7c8ba2c3a6f9868cb539.
//
// Solidity: event SubmitCreateBridgeToken(bytes32 indexed destinationBlockchainID, address indexed destinationBridgeAddress, address indexed nativeContractAddress, uint256 teleporterMessageID)
func (_ICS20Bridge *ICS20BridgeFilterer) FilterSubmitCreateBridgeToken(opts *bind.FilterOpts, destinationBlockchainID [][32]byte, destinationBridgeAddress []common.Address, nativeContractAddress []common.Address) (*ICS20BridgeSubmitCreateBridgeTokenIterator, error) {

	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var destinationBridgeAddressRule []interface{}
	for _, destinationBridgeAddressItem := range destinationBridgeAddress {
		destinationBridgeAddressRule = append(destinationBridgeAddressRule, destinationBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.FilterLogs(opts, "SubmitCreateBridgeToken", destinationBlockchainIDRule, destinationBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeSubmitCreateBridgeTokenIterator{contract: _ICS20Bridge.contract, event: "SubmitCreateBridgeToken", logs: logs, sub: sub}, nil
}

// WatchSubmitCreateBridgeToken is a free log subscription operation binding the contract event 0x110b902745a3d7d6b66732479f01de654a3bc6e501be7c8ba2c3a6f9868cb539.
//
// Solidity: event SubmitCreateBridgeToken(bytes32 indexed destinationBlockchainID, address indexed destinationBridgeAddress, address indexed nativeContractAddress, uint256 teleporterMessageID)
func (_ICS20Bridge *ICS20BridgeFilterer) WatchSubmitCreateBridgeToken(opts *bind.WatchOpts, sink chan<- *ICS20BridgeSubmitCreateBridgeToken, destinationBlockchainID [][32]byte, destinationBridgeAddress []common.Address, nativeContractAddress []common.Address) (event.Subscription, error) {

	var destinationBlockchainIDRule []interface{}
	for _, destinationBlockchainIDItem := range destinationBlockchainID {
		destinationBlockchainIDRule = append(destinationBlockchainIDRule, destinationBlockchainIDItem)
	}
	var destinationBridgeAddressRule []interface{}
	for _, destinationBridgeAddressItem := range destinationBridgeAddress {
		destinationBridgeAddressRule = append(destinationBridgeAddressRule, destinationBridgeAddressItem)
	}
	var nativeContractAddressRule []interface{}
	for _, nativeContractAddressItem := range nativeContractAddress {
		nativeContractAddressRule = append(nativeContractAddressRule, nativeContractAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.WatchLogs(opts, "SubmitCreateBridgeToken", destinationBlockchainIDRule, destinationBridgeAddressRule, nativeContractAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICS20BridgeSubmitCreateBridgeToken)
				if err := _ICS20Bridge.contract.UnpackLog(event, "SubmitCreateBridgeToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitCreateBridgeToken is a log parse operation binding the contract event 0x110b902745a3d7d6b66732479f01de654a3bc6e501be7c8ba2c3a6f9868cb539.
//
// Solidity: event SubmitCreateBridgeToken(bytes32 indexed destinationBlockchainID, address indexed destinationBridgeAddress, address indexed nativeContractAddress, uint256 teleporterMessageID)
func (_ICS20Bridge *ICS20BridgeFilterer) ParseSubmitCreateBridgeToken(log types.Log) (*ICS20BridgeSubmitCreateBridgeToken, error) {
	event := new(ICS20BridgeSubmitCreateBridgeToken)
	if err := _ICS20Bridge.contract.UnpackLog(event, "SubmitCreateBridgeToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICS20BridgeTeleporterAddressPausedIterator is returned from FilterTeleporterAddressPaused and is used to iterate over the raw logs and unpacked data for TeleporterAddressPaused events raised by the ICS20Bridge contract.
type ICS20BridgeTeleporterAddressPausedIterator struct {
	Event *ICS20BridgeTeleporterAddressPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICS20BridgeTeleporterAddressPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICS20BridgeTeleporterAddressPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICS20BridgeTeleporterAddressPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICS20BridgeTeleporterAddressPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICS20BridgeTeleporterAddressPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICS20BridgeTeleporterAddressPaused represents a TeleporterAddressPaused event raised by the ICS20Bridge contract.
type ICS20BridgeTeleporterAddressPaused struct {
	TeleporterAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTeleporterAddressPaused is a free log retrieval operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ICS20Bridge *ICS20BridgeFilterer) FilterTeleporterAddressPaused(opts *bind.FilterOpts, teleporterAddress []common.Address) (*ICS20BridgeTeleporterAddressPausedIterator, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.FilterLogs(opts, "TeleporterAddressPaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeTeleporterAddressPausedIterator{contract: _ICS20Bridge.contract, event: "TeleporterAddressPaused", logs: logs, sub: sub}, nil
}

// WatchTeleporterAddressPaused is a free log subscription operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ICS20Bridge *ICS20BridgeFilterer) WatchTeleporterAddressPaused(opts *bind.WatchOpts, sink chan<- *ICS20BridgeTeleporterAddressPaused, teleporterAddress []common.Address) (event.Subscription, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.WatchLogs(opts, "TeleporterAddressPaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICS20BridgeTeleporterAddressPaused)
				if err := _ICS20Bridge.contract.UnpackLog(event, "TeleporterAddressPaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeleporterAddressPaused is a log parse operation binding the contract event 0x933f93e57a222e6330362af8b376d0a8725b6901e9a2fb86d00f169702b28a4c.
//
// Solidity: event TeleporterAddressPaused(address indexed teleporterAddress)
func (_ICS20Bridge *ICS20BridgeFilterer) ParseTeleporterAddressPaused(log types.Log) (*ICS20BridgeTeleporterAddressPaused, error) {
	event := new(ICS20BridgeTeleporterAddressPaused)
	if err := _ICS20Bridge.contract.UnpackLog(event, "TeleporterAddressPaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ICS20BridgeTeleporterAddressUnpausedIterator is returned from FilterTeleporterAddressUnpaused and is used to iterate over the raw logs and unpacked data for TeleporterAddressUnpaused events raised by the ICS20Bridge contract.
type ICS20BridgeTeleporterAddressUnpausedIterator struct {
	Event *ICS20BridgeTeleporterAddressUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log          // Log channel receiving the found contract events
	sub  interfaces.Subscription // Subscription for errors, completion and termination
	done bool                    // Whether the subscription completed delivering logs
	fail error                   // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ICS20BridgeTeleporterAddressUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ICS20BridgeTeleporterAddressUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ICS20BridgeTeleporterAddressUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ICS20BridgeTeleporterAddressUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ICS20BridgeTeleporterAddressUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ICS20BridgeTeleporterAddressUnpaused represents a TeleporterAddressUnpaused event raised by the ICS20Bridge contract.
type ICS20BridgeTeleporterAddressUnpaused struct {
	TeleporterAddress common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterTeleporterAddressUnpaused is a free log retrieval operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ICS20Bridge *ICS20BridgeFilterer) FilterTeleporterAddressUnpaused(opts *bind.FilterOpts, teleporterAddress []common.Address) (*ICS20BridgeTeleporterAddressUnpausedIterator, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.FilterLogs(opts, "TeleporterAddressUnpaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return &ICS20BridgeTeleporterAddressUnpausedIterator{contract: _ICS20Bridge.contract, event: "TeleporterAddressUnpaused", logs: logs, sub: sub}, nil
}

// WatchTeleporterAddressUnpaused is a free log subscription operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ICS20Bridge *ICS20BridgeFilterer) WatchTeleporterAddressUnpaused(opts *bind.WatchOpts, sink chan<- *ICS20BridgeTeleporterAddressUnpaused, teleporterAddress []common.Address) (event.Subscription, error) {

	var teleporterAddressRule []interface{}
	for _, teleporterAddressItem := range teleporterAddress {
		teleporterAddressRule = append(teleporterAddressRule, teleporterAddressItem)
	}

	logs, sub, err := _ICS20Bridge.contract.WatchLogs(opts, "TeleporterAddressUnpaused", teleporterAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ICS20BridgeTeleporterAddressUnpaused)
				if err := _ICS20Bridge.contract.UnpackLog(event, "TeleporterAddressUnpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeleporterAddressUnpaused is a log parse operation binding the contract event 0x844e2f3154214672229235858fd029d1dfd543901c6d05931f0bc2480a2d72c3.
//
// Solidity: event TeleporterAddressUnpaused(address indexed teleporterAddress)
func (_ICS20Bridge *ICS20BridgeFilterer) ParseTeleporterAddressUnpaused(log types.Log) (*ICS20BridgeTeleporterAddressUnpaused, error) {
	event := new(ICS20BridgeTeleporterAddressUnpaused)
	if err := _ICS20Bridge.contract.UnpackLog(event, "TeleporterAddressUnpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
